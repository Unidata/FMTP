!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Accept	protocol/TcpServer.cpp	/^int TcpServer::Accept() {$/;"	f	class:TcpServer
AcceptClients	protocol/TcpServer.cpp	/^void TcpServer::AcceptClients() {$/;"	f	class:TcpServer
AccessCPUCounter	CommUtil/Timer.cpp	/^void AccessCPUCounter(unsigned *hi, unsigned *lo) {$/;"	f
AddMessageMetadata	protocol/VcmtpSenderMetadata.cpp	/^void VcmtpSenderMetadata::AddMessageMetadata(MessageMetadata* ptr_meta) {$/;"	f	class:VcmtpSenderMetadata
AddNewEvent	protocol/VcmtpEventQueueManager.cpp	/^int	VcmtpEventQueueManager::AddNewEvent(VcmtpMsgTransferEvent& event) {$/;"	f	class:VcmtpEventQueueManager
AddNewTransferEvent	protocol/VcmtpEventQueueManager.cpp	/^int VcmtpEventQueueManager::AddNewTransferEvent(VcmtpMsgTransferEvent& event) {$/;"	f	class:VcmtpEventQueueManager
AddRetxRequest	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::AddRetxRequest(uint msg_id, uint current_offset, uint received_seq) {$/;"	f	class:VCMTPReceiver
AddSessionStatistics	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::AddSessionStatistics(uint msg_id) {$/;"	f	class:VCMTPReceiver
AddTokens	CommUtil/RateShaper.cpp	/^void RateShaper::AddTokens() {$/;"	f	class:RateShaper
AddTokensHandler	CommUtil/RateShaper.cpp	/^void RateShaper::AddTokensHandler(int cause, siginfo_t *si, void *ucontext) {$/;"	f	class:RateShaper
BOFRESPONSE_H_	protocol/BofResponse.h	/^#define BOFRESPONSE_H_$/;"	d
BOFRESPONSE_H_	test/protocol/BofResponse/BofResponse.h	/^#define BOFRESPONSE_H_$/;"	d
BOF_NOT_RECEIVED	protocol/VcmtpSenderMetadata.h	/^enum MsgTransferStatus {BOF_NOT_RECEIVED, IN_NORMAL_TRANSFER, FINISHED};$/;"	e	enum:MsgTransferStatus
BUFFER_ENTRY	protocol/vcmtp.h	/^} BUFFER_ENTRY, * PTR_BUFFER_ENTRY;$/;"	t	typeref:struct:PacketBuffer
BUFFER_PACKET_SIZE	protocol/VCMTPSender.h	/^#define	BUFFER_PACKET_SIZE	/;"	d
BUFFER_SIZE	CommUtil/CommUtil.h	/^#define BUFFER_SIZE /;"	d
BUFFER_SIZE	protocol/LdmIntegrator.h	/^#define	BUFFER_SIZE	/;"	d
BUFFER_TCP_RECV_PORT	protocol/vcmtp.h	/^const static ushort BUFFER_TCP_RECV_PORT = 12348;$/;"	v
BUFFER_TCP_SEND_PORT	protocol/vcmtp.h	/^const static ushort BUFFER_TCP_SEND_PORT = 12347;$/;"	v
BUFFER_UDP_RECV_PORT	protocol/vcmtp.h	/^const static ushort BUFFER_UDP_RECV_PORT = 12346;$/;"	v
BUFFER_UDP_SEND_PORT	protocol/vcmtp.h	/^const static ushort BUFFER_UDP_SEND_PORT = 12345;$/;"	v
BUFF_SIZE	protocol/vcmtp.h	/^const static int BUFF_SIZE = 10000;$/;"	v
BatchedNotifier	protocol/VCMTPReceiver.h	/^	    BatchedNotifier(VCMTPReceiver& receiver) : receiver(receiver) {};$/;"	f	class:VCMTPReceiver::BatchedNotifier
BatchedNotifier	protocol/VCMTPReceiver.h	/^	class BatchedNotifier : public ReceivingApplicationNotifier {$/;"	c	class:VCMTPReceiver
Bind	protocol/RawSocketComm.cpp	/^void RawSocketComm::Bind(const SA* sa, int sa_len, u_char* mac_addr) {$/;"	f	class:RawSocketComm
BofResponse	protocol/BofResponse.h	/^    BofResponse(bool isWanted) : is_wanted(isWanted) {};$/;"	f	class:BofResponse
BofResponse	protocol/BofResponse.h	/^class BofResponse {$/;"	c
BofResponse	test/protocol/BofResponse/BofResponse.h	/^    BofResponse(bool isWanted) : is_wanted(isWanted) {};$/;"	f	class:BofResponse
BofResponse	test/protocol/BofResponse/BofResponse.h	/^class BofResponse {$/;"	c
BofResponseTest	test/protocol/BofResponse/BofResponseTest.cpp	/^CPPUNIT_TEST_SUITE_REGISTRATION(BofResponseTest);$/;"	v
BofResponseTest	test/protocol/BofResponse/BofResponseTest.cpp	/^class BofResponseTest : public CppUnit::TestFixture {$/;"	c	file:
CC	test/protocol/BofResponse/Makefile	/^CC = g++$/;"	m
COLLECT_STATISTICS	protocol/vcmtp.h	/^static const int COLLECT_STATISTICS = 13;$/;"	v
COMMAND	CommUtil/CommUtil.h	/^    COMMAND = 5,$/;"	e	enum:MsgType
COMMAND_RESPONSE	CommUtil/CommUtil.h	/^    COMMAND_RESPONSE = 6,$/;"	e	enum:MsgType
COMMUTIL_H_	CommUtil/CommUtil.h	/^#define COMMUTIL_H_$/;"	d
CONFIGINFO_H_	protocol/ConfigInfo.h	/^#define CONFIGINFO_H_$/;"	d
CPUUSAGECOUNTER_H_	CommUtil/PerformanceCounter.h	/^#define CPUUSAGECOUNTER_H_$/;"	d
CPU_MHZ	CommUtil/Timer.cpp	/^double Timer::CPU_MHZ = GetCPUMhz();$/;"	m	class:Timer	file:
CPU_MHZ	CommUtil/Timer.h	/^	static double CPU_MHZ;$/;"	m	class:Timer
CheckReceivedFile	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::CheckReceivedFile(const char* file_name, size_t length) {$/;"	f	class:VCMTPReceiver
Clean	starter/EmulabStarter.cpp	/^void Clean() {$/;"	f
ClearAllMetadata	protocol/VcmtpSenderMetadata.cpp	/^void VcmtpSenderMetadata::ClearAllMetadata() {$/;"	f	class:VcmtpSenderMetadata
CollectExpResults	protocol/VCMTPSender.cpp	/^void VCMTPSender::CollectExpResults() {$/;"	f	class:VCMTPSender
ConfigInfo	protocol/ConfigInfo.cpp	/^ConfigInfo::ConfigInfo() {$/;"	f	class:ConfigInfo
ConfigInfo	protocol/ConfigInfo.h	/^class ConfigInfo {$/;"	c
ConfigureEnvironment	protocol/ReceiverStatusProxy.cpp	/^void ReceiverStatusProxy::ConfigureEnvironment() {$/;"	f	class:ReceiverStatusProxy
ConfigureEnvironment	protocol/SenderStatusProxy.cpp	/^void SenderStatusProxy::ConfigureEnvironment() {$/;"	f	class:SenderStatusProxy
Connect	protocol/TcpClient.cpp	/^int TcpClient::Connect() {$/;"	f	class:TcpClient
ConnectSenderOnTCP	protocol/VCMTPReceiver.cpp	/^int VCMTPReceiver::ConnectSenderOnTCP() {$/;"	f	class:VCMTPReceiver
ConnectServer	CommUtil/StatusProxy.cpp	/^int StatusProxy::ConnectServer() {$/;"	f	class:StatusProxy
CpuCycleCounter	CommUtil/Timer.h	/^struct CpuCycleCounter {$/;"	s
CreateNewLogFile	protocol/vcmtp.cpp	/^void CreateNewLogFile(const char* file_name) {$/;"	f
DISK_TO_DISK	protocol/vcmtp.h	/^#define DISK_TO_DISK	/;"	d
DISK_TO_DISK_TRANSFER	protocol/VCMTPSender.h	/^enum TransferType  {MEMORY_TO_MEMORY_TRANSFER = 1, DISK_TO_DISK_TRANSFER};$/;"	e	enum:TransferType
DOUBLE_MAX	protocol/VcmtpSenderMetadata.h	/^#define	DOUBLE_MAX	/;"	d
DO_RETRANSMISSION	protocol/vcmtp.h	/^static const int DO_RETRANSMISSION = 7;$/;"	v
DoAsynchronousWrite	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::DoAsynchronousWrite(int fd, size_t offset, char* data_buffer, size_t length) {$/;"	f	class:VCMTPReceiver
DoFileRetransmission	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::DoFileRetransmission(int fd, const list<VcmtpNackMessage>& nack_list) {$/;"	f	class:VCMTPReceiver
DoFileRetransmissionParallel	protocol/VCMTPSender.cpp	/^void VCMTPSender::DoFileRetransmissionParallel(const char* file_name) {$/;"	f	class:VCMTPSender
DoFileRetransmissionSerial	protocol/VCMTPSender.cpp	/^void VCMTPSender::DoFileRetransmissionSerial(int fd) {$/;"	f	class:VCMTPSender
DoFileRetransmissionSerialRR	protocol/VCMTPSender.cpp	/^void VCMTPSender::DoFileRetransmissionSerialRR(int fd) {$/;"	f	class:VCMTPSender
DoLowSpeedExperiment	protocol/ExperimentManager.cpp	/^void ExperimentManager::DoLowSpeedExperiment(SenderStatusProxy* sender_proxy, VCMTPSender* sender) {$/;"	f	class:ExperimentManager
DoMemoryDataRetransmission	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::DoMemoryDataRetransmission(char* mem_data, const list<VcmtpNackMessage>& nack_list) {$/;"	f	class:VCMTPReceiver
DoMemoryDataRetransmission	protocol/VCMTPSender.cpp	/^void VCMTPSender::DoMemoryDataRetransmission(void* data) {$/;"	f	class:VCMTPSender
DoMemoryTransfer	protocol/VCMTPSender.cpp	/^void VCMTPSender::DoMemoryTransfer(void* data, size_t length, u_int32_t start_seq_num) {$/;"	f	class:VCMTPSender
DoSpeedTest	protocol/ExperimentManager.cpp	/^void ExperimentManager::DoSpeedTest(SenderStatusProxy* sender_proxy, VCMTPSender* sender) {$/;"	f	class:ExperimentManager
ELFFILE	test/protocol/BofResponse/Makefile	/^ELFFILE = UnitTest$/;"	m
EVENTQUEUE_H_	protocol/EventQueue.h	/^#define EVENTQUEUE_H_$/;"	d
EXECUTE_COMMAND	protocol/vcmtp.h	/^static const int EXECUTE_COMMAND = 14;$/;"	v
EXPERIMENTMANAGER2_H_	protocol/ExperimentManager2.h	/^#define EXPERIMENTMANAGER2_H_$/;"	d
EXPERIMENTMANAGER_H_	protocol/ExperimentManager.h	/^#define EXPERIMENTMANAGER_H_$/;"	d
EXP_RESULT_REPORT	CommUtil/CommUtil.h	/^    EXP_RESULT_REPORT = 7,$/;"	e	enum:MsgType
EventObject	protocol/EventQueue.h	/^struct EventObject {$/;"	s
EventQueue	protocol/EventQueue.cpp	/^EventQueue::EventQueue(int size_limit) {$/;"	f	class:EventQueue
EventQueue	protocol/EventQueue.h	/^class EventQueue {$/;"	c
ExecSysCommand	CommUtil/StatusProxy.cpp	/^int StatusProxy::ExecSysCommand(const char* command) {$/;"	f	class:StatusProxy
ExecSysCommand	protocol/Tester.cpp	/^string Tester::ExecSysCommand(char* cmd) {$/;"	f	class:Tester
ExecuteCommand	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::ExecuteCommand(char* command) {$/;"	f	class:VCMTPReceiver
ExecuteCommandOnReceivers	protocol/VCMTPSender.cpp	/^void VCMTPSender::ExecuteCommandOnReceivers(string command, int receiver_start, int receiver_end) {$/;"	f	class:VCMTPSender
ExperimentManager	protocol/ExperimentManager.cpp	/^ExperimentManager::ExperimentManager() {$/;"	f	class:ExperimentManager
ExperimentManager	protocol/ExperimentManager.h	/^class ExperimentManager {$/;"	c
ExperimentManager2	protocol/ExperimentManager2.cpp	/^ExperimentManager2::ExperimentManager2() {$/;"	f	class:ExperimentManager2
ExperimentManager2	protocol/ExperimentManager2.h	/^class ExperimentManager2 {$/;"	c
FILEENTRY_H_	protocol/VcmtpFileEntry.h	/^#define FILEENTRY_H_$/;"	d
FILE_COUNT	protocol/ExperimentManager2.cpp	/^static const int 	FILE_COUNT = 500;$/;"	v	file:
FILE_TRANSFER	protocol/SenderStatusProxy.h	/^	FILE_TRANSFER$/;"	e	enum:TransferMsgType
FILE_TRANSFER_FINISH	protocol/vcmtp.h	/^static const int FILE_TRANSFER_FINISH = 6;$/;"	v
FILE_TRANSFER_START	protocol/vcmtp.h	/^static const int FILE_TRANSFER_START = 5;$/;"	v
FINISHED	protocol/VcmtpSenderMetadata.h	/^enum MsgTransferStatus {BOF_NOT_RECEIVED, IN_NORMAL_TRANSFER, FINISHED};$/;"	e	enum:MsgTransferStatus
FileMessageMetadata	protocol/VcmtpSenderMetadata.h	/^	FileMessageMetadata() : MessageMetadata(),$/;"	f	struct:FileMessageMetadata
FileMessageMetadata	protocol/VcmtpSenderMetadata.h	/^struct FileMessageMetadata : public MessageMetadata {$/;"	s
File_Sample	protocol/ExperimentManager2.h	/^	File_Sample() {$/;"	f	struct:File_Sample
File_Sample	protocol/ExperimentManager2.h	/^struct File_Sample {$/;"	s
FillIfiInfo	protocol/NetInterfaceManager.cpp	/^void NetInterfaceManager::FillIfiInfo(int sock, int flags, PTR_IFI_INFO ptr_ifi, IFREQ* ptr_ifr, IFREQ* ptr_ifr_copy) {$/;"	f	class:NetInterfaceManager
GenerateDataFile	protocol/SenderStatusProxy.cpp	/^int SenderStatusProxy::GenerateDataFile(string file_name, ulong bytes) {$/;"	f	class:SenderStatusProxy
GenerateFile	protocol/ExperimentManager2.cpp	/^void ExperimentManager2::GenerateFile(string file_name, int size) {$/;"	f	class:ExperimentManager2
GenerateFiles	protocol/ExperimentManager2.cpp	/^File_Sample ExperimentManager2::GenerateFiles() {$/;"	f	class:ExperimentManager2
GetAverageCpuUsage	CommUtil/PerformanceCounter.cpp	/^int	PerformanceCounter::GetAverageCpuUsage() {$/;"	f	class:PerformanceCounter
GetBufferStats	protocol/VCMTPReceiver.cpp	/^const struct VcmtpReceiverStats VCMTPReceiver::GetBufferStats() {$/;"	f	class:VCMTPReceiver
GetCPUMeasurements	CommUtil/PerformanceCounter.cpp	/^string	PerformanceCounter::GetCPUMeasurements() {$/;"	f	class:PerformanceCounter
GetCPUMhz	CommUtil/Timer.cpp	/^double GetCPUMhz() {$/;"	f
GetCurrentTime	CommUtil/Timer.cpp	/^double GetCurrentTime() {$/;"	f
GetElapsedCycles	CommUtil/Timer.cpp	/^double GetElapsedCycles(unsigned cycle_hi, unsigned cycle_lo) {$/;"	f
GetElapsedSeconds	CommUtil/Timer.cpp	/^double GetElapsedSeconds(CpuCycleCounter lastCount) {$/;"	f
GetFileDescriptor	protocol/VcmtpSenderMetadata.cpp	/^int VcmtpSenderMetadata::GetFileDescriptor(uint msg_id) {$/;"	f	class:VcmtpSenderMetadata
GetFileSize	protocol/ExperimentManager.h	/^	ulong 	GetFileSize() {return file_size;}$/;"	f	class:ExperimentManager
GetFilesInDirectory	protocol/LdmIntegrator.cpp	/^int LdmIntegrator::GetFilesInDirectory(vector<string> &files)$/;"	f	class:LdmIntegrator
GetIfConf	protocol/NetInterfaceManager.cpp	/^char* NetInterfaceManager::GetIfConf(int sock, ifconf * ptr_ifc) {$/;"	f	class:NetInterfaceManager
GetIfiHead	protocol/NetInterfaceManager.cpp	/^PTR_IFI_INFO NetInterfaceManager::GetIfiHead() {$/;"	f	class:NetInterfaceManager
GetIfreqLength	protocol/NetInterfaceManager.cpp	/^int NetInterfaceManager::GetIfreqLength(IFREQ* ifr) {$/;"	f	class:NetInterfaceManager
GetInstance	protocol/ConfigInfo.cpp	/^ConfigInfo* ConfigInfo::GetInstance() {$/;"	f	class:ConfigInfo
GetInterfaceName	protocol/VCMTPComm.cpp	/^string VCMTPComm::GetInterfaceName() {$/;"	f	class:VCMTPComm
GetMacAddrString	protocol/RawSocketComm.cpp	/^string RawSocketComm::GetMacAddrString(const unsigned char* addr) {$/;"	f	class:RawSocketComm
GetMetadata	protocol/VcmtpSenderMetadata.cpp	/^MessageMetadata* VcmtpSenderMetadata::GetMetadata(uint msg_id) {$/;"	f	class:VcmtpSenderMetadata
GetMulticastAddress	protocol/VCMTPComm.cpp	/^string VCMTPComm::GetMulticastAddress() {$/;"	f	class:VCMTPComm
GetMulticastMacAddressFromIP	protocol/VCMTPComm.cpp	/^void VCMTPComm::GetMulticastMacAddressFromIP(u_char* mac_addr, u_int ip_addr) {$/;"	f	class:VCMTPComm
GetNextEvent	protocol/VcmtpEventQueueManager.cpp	/^int VcmtpEventQueueManager::GetNextEvent(VcmtpMsgTransferEvent* event) {$/;"	f	class:VcmtpEventQueueManager
GetNextTransferEvent	protocol/VcmtpEventQueueManager.cpp	/^int VcmtpEventQueueManager::GetNextTransferEvent(VcmtpMsgTransferEvent* event) {$/;"	f	class:VcmtpEventQueueManager
GetNodeId	CommUtil/StatusProxy.cpp	/^string StatusProxy::GetNodeId() {$/;"	f	class:StatusProxy
GetNumReceivers	protocol/VCMTPSender.cpp	/^int	VCMTPSender::GetNumReceivers() {$/;"	f	class:VCMTPSender
GetPacketLossRate	protocol/VCMTPReceiver.cpp	/^int VCMTPReceiver::GetPacketLossRate() {$/;"	f	class:VCMTPReceiver
GetParamSet	protocol/ConfigInfo.cpp	/^map<string, string> ConfigInfo::GetParamSet() {$/;"	f	class:ConfigInfo
GetPortNumber	protocol/VCMTPComm.cpp	/^int VCMTPComm::GetPortNumber() {$/;"	f	class:VCMTPComm
GetReceiverTCPSockets	protocol/VCMTPSender.cpp	/^list<int> VCMTPSender::GetReceiverTCPSockets() {$/;"	f	class:VCMTPSender
GetRetransmissionTimeoutRatio	protocol/SenderStatusProxy.cpp	/^int SenderStatusProxy::GetRetransmissionTimeoutRatio() {$/;"	f	class:SenderStatusProxy
GetSendRate	protocol/ExperimentManager.h	/^	int 	GetSendRate() {return send_rate;}$/;"	f	class:ExperimentManager
GetSendRate	protocol/VCMTPSender.cpp	/^int	VCMTPSender::GetSendRate() {$/;"	f	class:VCMTPSender
GetSocket	protocol/InetComm.cpp	/^int InetComm::GetSocket() {$/;"	f	class:InetComm
GetSocket	protocol/TcpClient.cpp	/^int TcpClient::GetSocket() {$/;"	f	class:TcpClient
GetSocketList	protocol/TcpServer.cpp	/^const list<int>& TcpServer::GetSocketList() {$/;"	f	class:TcpServer
GetValue	protocol/ConfigInfo.cpp	/^string ConfigInfo::GetValue(string param) {$/;"	f	class:ConfigInfo
HIGH_SPEED_EXP	protocol/ExperimentManager.h	/^const int HIGH_SPEED_EXP = 1;$/;"	v
HIGH_SPEED_RETRANS_EXP	protocol/ExperimentManager.h	/^const int HIGH_SPEED_RETRANS_EXP = 2;$/;"	v
HandleAsyncWriteCompletion	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::HandleAsyncWriteCompletion(sigval_t sigval) {$/;"	f	class:VCMTPReceiver
HandleBofMessage	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::HandleBofMessage(VcmtpSenderMessage& sender_msg) {$/;"	f	class:VCMTPReceiver
HandleCommand	CommUtil/StatusProxy.cpp	/^int StatusProxy::HandleCommand(const char* command) {$/;"	f	class:StatusProxy
HandleCommand	protocol/ReceiverStatusProxy.cpp	/^int ReceiverStatusProxy::HandleCommand(const char* command) {$/;"	f	class:ReceiverStatusProxy
HandleCommand	protocol/SenderStatusProxy.cpp	/^int SenderStatusProxy::HandleCommand(const char* command) {$/;"	f	class:SenderStatusProxy
HandleEofMessage	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::HandleEofMessage(uint msg_id) {$/;"	f	class:VCMTPReceiver
HandleExpResults	protocol/ExperimentManager.cpp	/^void ExperimentManager::HandleExpResults(string msg) {$/;"	f	class:ExperimentManager
HandleExpResults	protocol/ExperimentManager2.cpp	/^void ExperimentManager2::HandleExpResults(string msg) {$/;"	f	class:ExperimentManager2
HandleMissingPackets	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::HandleMissingPackets(list<VcmtpNackMessage>& nack_list, uint current_offset, uint received_seq) {$/;"	f	class:VCMTPReceiver
HandleMulticastPacket	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::HandleMulticastPacket() {$/;"	f	class:VCMTPReceiver
HandleRestartCommand	CommUtil/StatusProxy.cpp	/^void StatusProxy::HandleRestartCommand() {$/;"	f	class:StatusProxy
HandleSendCommand	protocol/SenderStatusProxy.cpp	/^int SenderStatusProxy::HandleSendCommand(list<string>& slist) {$/;"	f	class:SenderStatusProxy
HandleSenderMessage	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::HandleSenderMessage(VcmtpSenderMessage& sender_msg) {$/;"	f	class:VCMTPReceiver
HandleTcpSendCommand	protocol/SenderStatusProxy.cpp	/^int SenderStatusProxy::HandleTcpSendCommand(list<string>& slist) {$/;"	f	class:SenderStatusProxy
HandleUnicastPacket	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::HandleUnicastPacket() {$/;"	f	class:VCMTPReceiver
HasEvent	protocol/EventQueue.cpp	/^bool EventQueue::HasEvent() {$/;"	f	class:EventQueue
HexToDecimal	CommUtil/PerformanceCounter.cpp	/^int	PerformanceCounter::HexToDecimal(char* start, char* end) {$/;"	f	class:PerformanceCounter
IFI_ALIAS	protocol/NetInterfaceManager.h	/^#define IFI_ALIAS	/;"	d
IFI_HADDR	protocol/NetInterfaceManager.h	/^#define	IFI_HADDR	/;"	d
IFI_INFO	protocol/NetInterfaceManager.h	/^} IFI_INFO, *PTR_IFI_INFO;$/;"	t	typeref:struct:ifi_info
IFI_NAME	protocol/NetInterfaceManager.h	/^#define IFI_NAME /;"	d
IFREQ	protocol/vcmtp.h	/^typedef struct ifreq	IFREQ;$/;"	t	typeref:struct:ifreq
INCLUDE	test/protocol/BofResponse/Makefile	/^INCLUDE = ..\/..\/..\/protocol\/$/;"	m
INETCOMM_H_	protocol/InetComm.h	/^#define INETCOMM_H_$/;"	d
INFORMATIONAL	CommUtil/CommUtil.h	/^    INFORMATIONAL = 3,$/;"	e	enum:MsgType
INIT_RTT	protocol/vcmtp.h	/^static const int INIT_RTT	= 50;		\/\/ in milliseconds$/;"	v
IN_NORMAL_TRANSFER	protocol/VcmtpSenderMetadata.h	/^enum MsgTransferStatus {BOF_NOT_RECEIVED, IN_NORMAL_TRANSFER, FINISHED};$/;"	e	enum:MsgTransferStatus
IP_ADDRESS	CommUtil/CommUtil.h	/^    IP_ADDRESS = 2,$/;"	e	enum:MsgType
InetComm	protocol/InetComm.cpp	/^InetComm::InetComm() {$/;"	f	class:InetComm
InetComm	protocol/InetComm.h	/^class InetComm {$/;"	c
InitIfiInfo	protocol/NetInterfaceManager.cpp	/^void NetInterfaceManager::InitIfiInfo(int family, int doaliases) {$/;"	f	class:NetInterfaceManager
InitializeExecutionProcess	CommUtil/StatusProxy.cpp	/^void StatusProxy::InitializeExecutionProcess() {$/;"	f	class:StatusProxy
InitializeExecutionProcess	protocol/ReceiverStatusProxy.cpp	/^void ReceiverStatusProxy::InitializeExecutionProcess() {$/;"	f	class:ReceiverStatusProxy
InitializeExecutionProcess	protocol/SenderStatusProxy.cpp	/^void SenderStatusProxy::InitializeExecutionProcess() {$/;"	f	class:SenderStatusProxy
IsComment	protocol/ConfigInfo.cpp	/^bool ConfigInfo::IsComment(string line, string delimiter) {$/;"	f	class:ConfigInfo
IsMyPacket	protocol/RawSocketComm.cpp	/^bool RawSocketComm::IsMyPacket() {$/;"	f	class:RawSocketComm
IsSender	protocol/Tester.cpp	/^bool Tester::IsSender() {$/;"	f	class:Tester
IsTransferFinished	protocol/VCMTPSender.cpp	/^bool VCMTPSender::IsTransferFinished(uint msg_id) {$/;"	f	class:VCMTPSender
IsTransferFinished	protocol/VcmtpSenderMetadata.cpp	/^bool VcmtpSenderMetadata::IsTransferFinished(uint msg_id) {$/;"	f	class:VcmtpSenderMetadata
IsValidParam	protocol/ConfigInfo.cpp	/^bool ConfigInfo::IsValidParam(string param) {$/;"	f	class:ConfigInfo
JoinGroup	protocol/MulticastComm.cpp	/^int MulticastComm::JoinGroup(const SA* sa, int sa_len, const char *if_name) {$/;"	f	class:MulticastComm
JoinGroup	protocol/MulticastComm.cpp	/^int MulticastComm::JoinGroup(const SA* sa, int sa_len, u_int if_index) {$/;"	f	class:MulticastComm
JoinGroup	protocol/VCMTPComm.cpp	/^int VCMTPComm::JoinGroup(const string addr, const ushort port) {$/;"	f	class:VCMTPComm
JoinGroup	protocol/VCMTPReceiver.cpp	/^int VCMTPReceiver::JoinGroup(string addr, ushort port) {$/;"	f	class:VCMTPReceiver
JoinGroup	protocol/VCMTPSender.cpp	/^int VCMTPSender::JoinGroup(string addr, u_short port) {$/;"	f	class:VCMTPSender
LDMINTEGRATOR_H_	protocol/LdmIntegrator.h	/^#define LDMINTEGRATOR_H_$/;"	d
LIB	test/protocol/BofResponse/Makefile	/^LIB = cppunit$/;"	m
LOW_SPEED_EXP	protocol/ExperimentManager.h	/^const int LOW_SPEED_EXP = 3;$/;"	v
LdmIntegrator	protocol/LdmIntegrator.cpp	/^LdmIntegrator::LdmIntegrator(VCMTPSender* s, string save_path, SenderStatusProxy* p) {$/;"	f	class:LdmIntegrator
LdmIntegrator	protocol/LdmIntegrator.h	/^class LdmIntegrator {$/;"	c
LeaveGroup	protocol/MulticastComm.cpp	/^int MulticastComm::LeaveGroup() {$/;"	f	class:MulticastComm
Listen	protocol/TcpServer.cpp	/^void TcpServer::Listen()	 {$/;"	f	class:TcpServer
Log	protocol/vcmtp.cpp	/^void Log(char* format, ...) {$/;"	f
MAX	protocol/vcmtp.h	/^#define MAX(/;"	d
MAX_EVENT_LENGTH	protocol/VcmtpEventQueueManager.h	/^#define MAX_EVENT_LENGTH /;"	d
MAX_FILE_NAME_LENGTH	protocol/vcmtp.h	/^#define MAX_FILE_NAME_LENGTH /;"	d
MAX_MAPPED_MEM_SIZE	protocol/vcmtp.h	/^static const int MAX_MAPPED_MEM_SIZE = 4096 * VCMTP_DATA_LEN;$/;"	v
MAX_NACK_IDS	protocol/vcmtp.h	/^const int MAX_NACK_IDS = 10;$/;"	v
MAX_NUM_NACK_REQ	protocol/vcmtp.h	/^const int MAX_NUM_NACK_REQ = 50;$/;"	v
MAX_NUM_RECEIVERS	protocol/vcmtp.h	/^static const int MAX_NUM_RECEIVERS = 200;$/;"	v
MEMORY_TO_MEMORY	protocol/vcmtp.h	/^#define MEMORY_TO_MEMORY	/;"	d
MEMORY_TO_MEMORY_TRANSFER	protocol/VCMTPSender.h	/^enum TransferType  {MEMORY_TO_MEMORY_TRANSFER = 1, DISK_TO_DISK_TRANSFER};$/;"	e	enum:TransferType
MEMORY_TRANSFER	protocol/SenderStatusProxy.h	/^	MEMORY_TRANSFER,$/;"	e	enum:TransferMsgType
MEMORY_TRANSFER_FINISH	protocol/vcmtp.h	/^static const int MEMORY_TRANSFER_FINISH = 4;$/;"	v
MEMORY_TRANSFER_START	protocol/vcmtp.h	/^static const int MEMORY_TRANSFER_START = 3;$/;"	v
METADATA_SIZE_LIMIT	protocol/VcmtpSenderMetadata.h	/^#define METADATA_SIZE_LIMIT	/;"	d
MIN_RETX_TIMEOUT	protocol/VCMTPSender.cpp	/^#define MIN_RETX_TIMEOUT /;"	d	file:
MSG_END	protocol/SenderStatusProxy.h	/^	MSG_END = 1111111111$/;"	e	enum:MsgTag
MSG_START	protocol/SenderStatusProxy.h	/^	MSG_START = 1010101010,$/;"	e	enum:MsgTag
MULTICASTCOMM_H_	protocol/MulticastComm.h	/^#define MULTICASTCOMM_H_$/;"	d
MacFrame	protocol/RawSocketComm.h	/^struct MacFrame {$/;"	s
MeasureCPUInfo	CommUtil/PerformanceCounter.cpp	/^void PerformanceCounter::MeasureCPUInfo(ofstream& output) {$/;"	f	class:PerformanceCounter
MeasureUDPRecvBufferInfo	CommUtil/PerformanceCounter.cpp	/^void PerformanceCounter::MeasureUDPRecvBufferInfo(ofstream& output) {$/;"	f	class:PerformanceCounter
MemoryBofResponse	protocol/BofResponse.cpp	/^MemoryBofResponse::MemoryBofResponse($/;"	f	class:MemoryBofResponse
MemoryBofResponse	protocol/BofResponse.h	/^class MemoryBofResponse : public BofResponse {$/;"	c
MemoryBofResponse	test/protocol/BofResponse/BofResponse.cpp	/^MemoryBofResponse::MemoryBofResponse($/;"	f	class:MemoryBofResponse
MemoryBofResponse	test/protocol/BofResponse/BofResponse.h	/^class MemoryBofResponse : public BofResponse {$/;"	c
MemoryMessageMetadata	protocol/VcmtpSenderMetadata.h	/^struct MemoryMessageMetadata: public MessageMetadata {$/;"	s
MessageMetadata	protocol/VcmtpSenderMetadata.h	/^    MessageMetadata(): msg_id(0), ignore_file(false),$/;"	f	struct:MessageMetadata
MessageMetadata	protocol/VcmtpSenderMetadata.h	/^struct MessageMetadata {$/;"	s
MessageReceiveStatus	protocol/VCMTPReceiver.h	/^struct MessageReceiveStatus {$/;"	s
MessageTransferStats	protocol/VcmtpSenderMetadata.h	/^	MessageTransferStats() {$/;"	f	struct:MessageTransferStats
MessageTransferStats	protocol/VcmtpSenderMetadata.h	/^struct MessageTransferStats {$/;"	s
MsgTag	protocol/SenderStatusProxy.h	/^enum MsgTag {$/;"	g
MsgTransferStatus	protocol/VcmtpSenderMetadata.h	/^enum MsgTransferStatus {BOF_NOT_RECEIVED, IN_NORMAL_TRANSFER, FINISHED};$/;"	g
MsgType	CommUtil/CommUtil.h	/^enum MsgType {$/;"	g
MulticastComm	protocol/MulticastComm.cpp	/^MulticastComm::MulticastComm() {$/;"	f	class:MulticastComm
MulticastComm	protocol/MulticastComm.h	/^class MulticastComm : public InetComm {$/;"	c
NACK_MSG	protocol/vcmtp.h	/^} NACK_MSG, * PTR_NACK_MSG;$/;"	t	typeref:struct:VcmtpNackMessage
NETINTERFACEMANAGER_H_	protocol/NetInterfaceManager.h	/^#define NETINTERFACEMANAGER_H_$/;"	d
NODE_NAME	CommUtil/CommUtil.h	/^    NODE_NAME = 1,$/;"	e	enum:MsgType
NUM_EXPERIMENTS	protocol/ExperimentManager2.cpp	/^static const int 	NUM_EXPERIMENTS = 5;$/;"	v	file:
NackMsg	protocol/vcmtp.h	/^struct NackMsg {$/;"	s
NackMsgInfo	protocol/vcmtp.h	/^struct NackMsgInfo {$/;"	s
NetInterfaceManager	protocol/NetInterfaceManager.cpp	/^NetInterfaceManager::NetInterfaceManager() {$/;"	f	class:NetInterfaceManager
NetInterfaceManager	protocol/NetInterfaceManager.h	/^class NetInterfaceManager {$/;"	c
PARAM_SETTING	CommUtil/CommUtil.h	/^    PARAM_SETTING = 8$/;"	e	enum:MsgType
PORT_NUM	protocol/vcmtp.h	/^const static int PORT_NUM = 11001;$/;"	v
PTR_BUFFER_ENTRY	protocol/vcmtp.h	/^} BUFFER_ENTRY, * PTR_BUFFER_ENTRY;$/;"	t	typeref:struct:PacketBuffer
PTR_IFI_INFO	protocol/NetInterfaceManager.h	/^} IFI_INFO, *PTR_IFI_INFO;$/;"	t	typeref:struct:ifi_info
PTR_NACK_MSG	protocol/vcmtp.h	/^} NACK_MSG, * PTR_NACK_MSG;$/;"	t	typeref:struct:VcmtpNackMessage
PTR_VCMTP_HEADER	protocol/vcmtp.h	/^} VCMTP_HEADER, *PTR_VCMTP_HEADER;$/;"	t	typeref:struct:VcmtpHeader
PacketBuffer	protocol/vcmtp.h	/^typedef struct PacketBuffer {$/;"	s
Parse	protocol/ConfigInfo.cpp	/^void ConfigInfo::Parse(string fileName) {$/;"	f	class:ConfigInfo
ParseLine	protocol/ConfigInfo.cpp	/^void ConfigInfo::ParseLine(string line, char delimiter) {$/;"	f	class:ConfigInfo
PerformanceCounter	CommUtil/PerformanceCounter.cpp	/^PerformanceCounter::PerformanceCounter() : interval(1000) {$/;"	f	class:PerformanceCounter
PerformanceCounter	CommUtil/PerformanceCounter.cpp	/^PerformanceCounter::PerformanceCounter(int interval) : interval(interval) {$/;"	f	class:PerformanceCounter
PerformanceCounter	CommUtil/PerformanceCounter.h	/^class PerformanceCounter {$/;"	c
PrepareForFileTransfer	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::PrepareForFileTransfer(VcmtpSenderMessage& sender_msg) {$/;"	f	class:VCMTPReceiver
RATESHAPER_H_	CommUtil/RateShaper.h	/^#define RATESHAPER_H_$/;"	d
RATE_CHECK_PERIOD	protocol/RawSocketComm.h	/^#define RATE_CHECK_PERIOD /;"	d
RAWSOCKETCOMM_H_	protocol/RawSocketComm.h	/^#define RAWSOCKETCOMM_H_$/;"	d
RECEIVERSTATUSPROXY_H_	protocol/ReceiverStatusProxy.h	/^#define RECEIVERSTATUSPROXY_H_$/;"	d
RECEIVING_APPLICATION_NOTIFIER_H_	protocol/ReceivingApplicationNotifier.h	/^#define RECEIVING_APPLICATION_NOTIFIER_H_$/;"	d
RESET_HISTORY_STATISTICS	protocol/vcmtp.h	/^static const int RESET_HISTORY_STATISTICS = 15;$/;"	v
RETRANS_PARALLEL	protocol/vcmtp.h	/^static const int RETRANS_PARALLEL = 3;		\/\/ parallel retransmission threads$/;"	v
RETRANS_SERIAL	protocol/vcmtp.h	/^static const int RETRANS_SERIAL = 1;  		\/\/ single retransmission thread, shortest job first$/;"	v
RETRANS_SERIAL_RR	protocol/vcmtp.h	/^static const int RETRANS_SERIAL_RR = 2;  	\/\/ single retransmission thread, send missing blocks one by one to all receivers$/;"	v
RateShaper	CommUtil/RateShaper.cpp	/^RateShaper::RateShaper() {$/;"	f	class:RateShaper
RateShaper	CommUtil/RateShaper.h	/^class RateShaper {$/;"	c
RawSocketComm	protocol/RawSocketComm.cpp	/^RawSocketComm::RawSocketComm(const char* if_name) {$/;"	f	class:RawSocketComm
RawSocketComm	protocol/RawSocketComm.h	/^class RawSocketComm : public InetComm {$/;"	c
ReadFileSizes	protocol/ExperimentManager2.cpp	/^void ExperimentManager2::ReadFileSizes(vector<int>& file_sizes) {$/;"	f	class:ExperimentManager2
ReadInterArrivals	protocol/ExperimentManager2.cpp	/^void ExperimentManager2::ReadInterArrivals(vector<double>& inter_arrival_times) {$/;"	f	class:ExperimentManager2
ReadMessageFromManager	CommUtil/StatusProxy.cpp	/^int StatusProxy::ReadMessageFromManager(int& msg_type, string& msg) {$/;"	f	class:StatusProxy
ReadMessageLocal	CommUtil/StatusProxy.cpp	/^int StatusProxy::ReadMessageLocal(int& msg_type, string& msg) {$/;"	f	class:StatusProxy
Receive	protocol/TcpClient.cpp	/^int TcpClient::Receive(void* buffer, size_t length) {$/;"	f	class:TcpClient
Receive	protocol/TcpServer.cpp	/^int TcpServer::Receive(int sock_fd, void* buffer, size_t length) {$/;"	f	class:TcpServer
ReceiveFileBufferedIO	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::ReceiveFileBufferedIO(const VcmtpSenderMessage & transfer_msg) {$/;"	f	class:VCMTPReceiver
ReceiveFileMemoryMappedIO	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::ReceiveFileMemoryMappedIO(const VcmtpSenderMessage & transfer_msg) {$/;"	f	class:VCMTPReceiver
ReceiveFrame	protocol/RawSocketComm.cpp	/^int RawSocketComm::ReceiveFrame(void* buffer) {$/;"	f	class:RawSocketComm
ReceiveMemoryData	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::ReceiveMemoryData(const VcmtpSenderMessage & transfer_msg, char* mem_data) {$/;"	f	class:VCMTPReceiver
ReceiveRetransRequestsSerial	protocol/VCMTPSender.cpp	/^void VCMTPSender::ReceiveRetransRequestsSerial(map<int, list<NACK_MSG> >* missing_packet_map) {$/;"	f	class:VCMTPSender
ReceiveRetransRequestsSerialRR	protocol/VCMTPSender.cpp	/^void VCMTPSender::ReceiveRetransRequestsSerialRR(map <NACK_MSG, list<int> >* missing_packet_map) {$/;"	f	class:VCMTPSender
ReceiverStatusProxy	protocol/ReceiverStatusProxy.cpp	/^ReceiverStatusProxy::ReceiverStatusProxy(string addr, int port, string group_addr, int vcmtp_port, int buff_size)$/;"	f	class:ReceiverStatusProxy
ReceiverStatusProxy	protocol/ReceiverStatusProxy.h	/^class ReceiverStatusProxy : public StatusProxy {$/;"	c
ReceivingApplicationNotifier	protocol/ReceivingApplicationNotifier.h	/^class ReceivingApplicationNotifier {$/;"	c
ReconnectSender	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::ReconnectSender() {$/;"	f	class:VCMTPReceiver
ReconnectServer	CommUtil/StatusProxy.cpp	/^void StatusProxy::ReconnectServer() {$/;"	f	class:StatusProxy
RecvData	protocol/MulticastComm.cpp	/^ssize_t MulticastComm::RecvData(void* buff, size_t len, int flags, SA* from, socklen_t* from_len) {$/;"	f	class:MulticastComm
RecvData	protocol/RawSocketComm.cpp	/^ssize_t RawSocketComm::RecvData(void* buff, size_t len, int flags, SA* from, socklen_t* from_len) {$/;"	f	class:RawSocketComm
RecvEvent	protocol/EventQueue.cpp	/^int EventQueue::RecvEvent(void* buff, int* event_type, int* event_length){$/;"	f	class:EventQueue
RecvFrom	protocol/UdpComm.cpp	/^ssize_t UdpComm::RecvFrom(void* buff, size_t len, int flags, SA* from, socklen_t* from_len) {$/;"	f	class:UdpComm
RemoveFinishedReceiver	protocol/VcmtpSenderMetadata.cpp	/^void VcmtpSenderMetadata::RemoveFinishedReceiver(uint msg_id, int sock_fd) {$/;"	f	class:VcmtpSenderMetadata
RemoveMessageMetadata	protocol/VcmtpSenderMetadata.cpp	/^void VcmtpSenderMetadata::RemoveMessageMetadata(uint msg_id) {$/;"	f	class:VcmtpSenderMetadata
RemoveSlowNodes	protocol/VCMTPSender.cpp	/^void VCMTPSender::RemoveSlowNodes() {$/;"	f	class:VCMTPSender
ResetAllReceiverStats	protocol/VCMTPSender.cpp	/^void VCMTPSender::ResetAllReceiverStats() {$/;"	f	class:VCMTPSender
ResetHistoryStats	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::ResetHistoryStats() {$/;"	f	class:VCMTPReceiver
ResetMetadata	protocol/VCMTPSender.cpp	/^void VCMTPSender::ResetMetadata() {$/;"	f	class:VCMTPSender
ResetSessionID	protocol/VCMTPSender.cpp	/^void VCMTPSender::ResetSessionID() {$/;"	f	class:VCMTPSender
ResetSessionStatistics	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::ResetSessionStatistics() {$/;"	f	class:VCMTPReceiver
ResetSessionStatistics	protocol/VCMTPSender.cpp	/^void VCMTPSender::ResetSessionStatistics() {$/;"	f	class:VCMTPSender
RestartTcpServer	protocol/VCMTPSender.cpp	/^int	VCMTPSender::RestartTcpServer() {$/;"	f	class:VCMTPSender
RetransThreadStartInfo	protocol/VCMTPSender.cpp	/^	RetransThreadStartInfo(const char* fname): file_name(fname) {}$/;"	f	struct:RetransThreadStartInfo
RetransThreadStartInfo	protocol/VCMTPSender.cpp	/^struct RetransThreadStartInfo {$/;"	s	file:
RetrieveTokens	CommUtil/RateShaper.cpp	/^void RateShaper::RetrieveTokens(int num_tokens) {$/;"	f	class:RateShaper
RunCountThread	CommUtil/PerformanceCounter.cpp	/^void PerformanceCounter::RunCountThread() {$/;"	f	class:PerformanceCounter
RunManagerReceiveThread	CommUtil/StatusProxy.cpp	/^void StatusProxy::RunManagerReceiveThread() {$/;"	f	class:StatusProxy
RunManagerSendThread	CommUtil/StatusProxy.cpp	/^void StatusProxy::RunManagerSendThread() {$/;"	f	class:StatusProxy
RunOneExperimentSet	protocol/ExperimentManager2.cpp	/^void ExperimentManager2::RunOneExperimentSet(vector<int>& file_sizes, vector<double>& inter_arrival_times,$/;"	f	class:ExperimentManager2
RunProcessExecutionThread	CommUtil/StatusProxy.cpp	/^void StatusProxy::RunProcessExecutionThread() {$/;"	f	class:StatusProxy
RunReceiveThread	protocol/LdmIntegrator.cpp	/^void LdmIntegrator::RunReceiveThread() {$/;"	f	class:LdmIntegrator
RunReceiverThread	protocol/ReceiverStatusProxy.cpp	/^void ReceiverStatusProxy::RunReceiverThread() {$/;"	f	class:ReceiverStatusProxy
RunReceivingThread	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::RunReceivingThread() {$/;"	f	class:VCMTPReceiver
RunRetransThread	protocol/VCMTPSender.cpp	/^void VCMTPSender::RunRetransThread(int sock, map<uint, int>& retrans_fd_map, set<uint>& timeout_set) {$/;"	f	class:VCMTPSender
RunRetransmissionThread	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::RunRetransmissionThread() {$/;"	f	class:VCMTPReceiver
RunRetransmissionThread	protocol/VCMTPSender.cpp	/^void VCMTPSender::RunRetransmissionThread(const char* file_name, map<int, list<NACK_MSG> >* missing_packet_map) {$/;"	f	class:VCMTPSender
RunSendThread	protocol/LdmIntegrator.cpp	/^void LdmIntegrator::RunSendThread() {$/;"	f	class:LdmIntegrator
RunTcpSendThread	protocol/VCMTPSender.cpp	/^void VCMTPSender::RunTcpSendThread(const char* file_name, int sock_fd) {$/;"	f	class:VCMTPSender
SA	CommUtil/StatusProxy.h	/^typedef struct sockaddr SA;$/;"	t	typeref:struct:sockaddr
SA	protocol/MulticastComm.h	/^typedef struct sockaddr SA;$/;"	t	typeref:struct:sockaddr
SA	protocol/vcmtp.h	/^typedef struct sockaddr SA;$/;"	t	typeref:struct:sockaddr
SENDERSTATUSPROXY_H_	protocol/SenderStatusProxy.h	/^#define SENDERSTATUSPROXY_H_$/;"	d
SEND_RATE_RATIO	protocol/vcmtp.h	/^static const double SEND_RATE_RATIO = (VCMTP_PACKET_LEN + 8 + ETH_HLEN) * 1.0 \/ VCMTP_DATA_LEN;$/;"	v
SERVER_PORT	protocol/LdmIntegrator.h	/^#define SERVER_PORT /;"	d
SET_LOSS_RATE	protocol/vcmtp.h	/^static const int SET_LOSS_RATE = 16;$/;"	v
SLOW_RECEIVER_RATIO	protocol/ExperimentManager2.cpp	/^static const int 	SLOW_RECEIVER_RATIO = 40;  \/\/ in percent$/;"	v	file:
SPEED_TEST	protocol/vcmtp.h	/^static const int SPEED_TEST = 12;$/;"	v
STATUSPROXY_H_	CommUtil/StatusProxy.h	/^#define STATUSPROXY_H_$/;"	d
STRING_TRANSFER	protocol/SenderStatusProxy.h	/^	STRING_TRANSFER,$/;"	e	enum:TransferMsgType
STRING_TRANSFER_FINISH	protocol/vcmtp.h	/^static const int STRING_TRANSFER_FINISH = 2;$/;"	v
STRING_TRANSFER_START	protocol/vcmtp.h	/^static const int STRING_TRANSFER_START = 1;$/;"	v
SelectReceive	protocol/TcpServer.cpp	/^int TcpServer::SelectReceive(int* conn_sock, void* buffer, size_t length) {$/;"	f	class:TcpServer
SelectSend	protocol/TcpServer.cpp	/^int TcpServer::SelectSend(int conn_sock, const void* data, size_t length) {$/;"	f	class:TcpServer
Send	protocol/TcpClient.cpp	/^int TcpClient::Send(const void* data, size_t length) {$/;"	f	class:TcpClient
SendAllStatistics	protocol/VCMTPSender.cpp	/^void VCMTPSender::SendAllStatistics() {$/;"	f	class:VCMTPSender
SendData	protocol/MulticastComm.cpp	/^ssize_t MulticastComm::SendData(const void* buff, size_t len, int flags, void* dst_addr) {$/;"	f	class:MulticastComm
SendData	protocol/RawSocketComm.cpp	/^ssize_t RawSocketComm::SendData(const void* buff, size_t len, int flags, void* dst_addr) {$/;"	f	class:RawSocketComm
SendEvent	protocol/EventQueue.cpp	/^int EventQueue::SendEvent(int event_type, void* event_object, int num_bytes) {$/;"	f	class:EventQueue
SendFile	protocol/VCMTPSender.cpp	/^uint VCMTPSender::SendFile(const char* file_name, int retx_timeout_ratio) {$/;"	f	class:VCMTPSender
SendFileBufferedIO	protocol/VCMTPSender.cpp	/^void VCMTPSender::SendFileBufferedIO(const char* file_name) {$/;"	f	class:VCMTPSender
SendFrame	protocol/RawSocketComm.cpp	/^int RawSocketComm::SendFrame(void* buffer, size_t length) {$/;"	f	class:RawSocketComm
SendHistoryStats	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::SendHistoryStats() {$/;"	f	class:VCMTPReceiver
SendHistoryStatsToSender	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::SendHistoryStatsToSender() {$/;"	f	class:VCMTPReceiver
SendMemoryData	protocol/VCMTPSender.cpp	/^void VCMTPSender::SendMemoryData(void* data, size_t length) {$/;"	f	class:VCMTPSender
SendMessage	protocol/LdmIntegrator.cpp	/^void LdmIntegrator::SendMessage(const char* msg) {$/;"	f	class:LdmIntegrator
SendMessage	protocol/Tester.cpp	/^void Tester::SendMessage(int level, string msg) {$/;"	f	class:Tester
SendMessageLocal	CommUtil/StatusProxy.cpp	/^int StatusProxy::SendMessageLocal(int msg_type, string msg) {$/;"	f	class:StatusProxy
SendMessageLocal	protocol/SenderStatusProxy.cpp	/^int SenderStatusProxy::SendMessageLocal(int msg_type, string msg) {$/;"	f	class:SenderStatusProxy
SendMessageToManager	CommUtil/StatusProxy.cpp	/^int StatusProxy::SendMessageToManager(int msg_type, string msg) {$/;"	f	class:StatusProxy
SendNackMessages	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::SendNackMessages(const list<VcmtpNackMessage>& nack_list) {$/;"	f	class:VCMTPReceiver
SendNodeInfo	CommUtil/StatusProxy.cpp	/^int StatusProxy::SendNodeInfo() {$/;"	f	class:StatusProxy
SendPacket	protocol/MulticastComm.cpp	/^ssize_t MulticastComm::SendPacket(PacketBuffer* buffer, int flags, void* dst_addr) {$/;"	f	class:MulticastComm
SendPacket	protocol/RawSocketComm.cpp	/^ssize_t RawSocketComm::SendPacket(PacketBuffer* buffer, int flags, void* dst_addr) {$/;"	f	class:RawSocketComm
SendSessionStatistics	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::SendSessionStatistics() {$/;"	f	class:VCMTPReceiver
SendSessionStatistics	protocol/VCMTPSender.cpp	/^void VCMTPSender::SendSessionStatistics() {$/;"	f	class:VCMTPSender
SendSessionStatisticsToSender	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::SendSessionStatisticsToSender() {$/;"	f	class:VCMTPReceiver
SendTo	protocol/UdpComm.cpp	/^ssize_t UdpComm::SendTo(const void* buff, size_t len, int flags, SA* to_addr,  socklen_t to_len) {$/;"	f	class:UdpComm
SendToAll	protocol/TcpServer.cpp	/^void TcpServer::SendToAll(const void* data, size_t length) {$/;"	f	class:TcpServer
SenderStatusProxy	protocol/SenderStatusProxy.cpp	/^SenderStatusProxy::SenderStatusProxy(string addr, int port, string group_addr, int vcmtp_port, int buff_size)$/;"	f	class:SenderStatusProxy
SenderStatusProxy	protocol/SenderStatusProxy.h	/^class SenderStatusProxy : public StatusProxy {$/;"	c
SetBufferSize	protocol/InetComm.cpp	/^void InetComm::SetBufferSize(size_t buf_size) {$/;"	f	class:InetComm
SetBufferSize	protocol/RawSocketComm.cpp	/^void RawSocketComm::SetBufferSize(size_t buf_size) {$/;"	f	class:RawSocketComm
SetBufferSize	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::SetBufferSize(size_t size) {$/;"	f	class:VCMTPReceiver
SetCPUFlag	CommUtil/PerformanceCounter.cpp	/^void PerformanceCounter::SetCPUFlag(bool flag) {$/;"	f	class:PerformanceCounter
SetInterval	CommUtil/PerformanceCounter.cpp	/^void PerformanceCounter::SetInterval(int milliseconds) {$/;"	f	class:PerformanceCounter
SetLoopBack	protocol/MulticastComm.cpp	/^int MulticastComm::SetLoopBack(int onoff) {$/;"	f	class:MulticastComm
SetNumRetransmissionThreads	protocol/VCMTPSender.cpp	/^void VCMTPSender::SetNumRetransmissionThreads(int num) {$/;"	f	class:VCMTPSender
SetPacketLossRate	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::SetPacketLossRate(int rate) {$/;"	f	class:VCMTPReceiver
SetQuiet	CommUtil/StatusProxy.cpp	/^void StatusProxy::SetQuiet(bool quiet) {$/;"	f	class:StatusProxy
SetRate	CommUtil/RateShaper.cpp	/^void RateShaper::SetRate(double rate_bps) {$/;"	f	class:RateShaper
SetReceiverLossRate	protocol/VCMTPSender.cpp	/^void VCMTPSender::SetReceiverLossRate(int recver_sock, int loss_rate) {$/;"	f	class:VCMTPSender
SetRetransmissionBufferSize	protocol/SenderStatusProxy.cpp	/^void SenderStatusProxy::SetRetransmissionBufferSize(int size_mb) {$/;"	f	class:SenderStatusProxy
SetRetransmissionBufferSize	protocol/VCMTPSender.cpp	/^void VCMTPSender::SetRetransmissionBufferSize(int size_mb) {$/;"	f	class:VCMTPSender
SetRetransmissionScheme	protocol/VCMTPSender.cpp	/^void VCMTPSender::SetRetransmissionScheme(int scheme) {$/;"	f	class:VCMTPSender
SetSchedRR	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::SetSchedRR(bool is_rr) {$/;"	f	class:VCMTPReceiver
SetSchedRR	protocol/VCMTPSender.cpp	/^void VCMTPSender::SetSchedRR(bool is_rr) {$/;"	f	class:VCMTPSender
SetSendRate	protocol/RawSocketComm.cpp	/^void RawSocketComm::SetSendRate(int num_mbps) {$/;"	f	class:RawSocketComm
SetSendRate	protocol/SenderStatusProxy.cpp	/^void SenderStatusProxy::SetSendRate(int rate_mbps) {$/;"	f	class:SenderStatusProxy
SetSendRate	protocol/VCMTPSender.cpp	/^void VCMTPSender::SetSendRate(int num_mbps) {$/;"	f	class:VCMTPSender
SetSocketBufferSize	protocol/UdpComm.cpp	/^void UdpComm::SetSocketBufferSize(size_t size) {$/;"	f	class:UdpComm
SetStatusProxy	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::SetStatusProxy(StatusProxy* proxy) {$/;"	f	class:VCMTPReceiver
SetStatusProxy	protocol/VCMTPSender.cpp	/^void VCMTPSender::SetStatusProxy(StatusProxy* proxy) {$/;"	f	class:VCMTPSender
SetTxQueueLength	protocol/SenderStatusProxy.cpp	/^void SenderStatusProxy::SetTxQueueLength(int length) {$/;"	f	class:SenderStatusProxy
SetUDPRecvBuffFlag	CommUtil/PerformanceCounter.cpp	/^void PerformanceCounter::SetUDPRecvBuffFlag(bool flag) {$/;"	f	class:PerformanceCounter
SortSocketsByShortestJobs	protocol/VCMTPSender.cpp	/^void VCMTPSender::SortSocketsByShortestJobs(int* ptr_socks,$/;"	f	class:VCMTPSender
Split	CommUtil/StatusProxy.cpp	/^void StatusProxy::Split(string s, char c, list<string>& slist) {$/;"	f	class:StatusProxy
Start	CommUtil/PerformanceCounter.cpp	/^void PerformanceCounter::Start() {$/;"	f	class:PerformanceCounter
Start	protocol/LdmIntegrator.cpp	/^void LdmIntegrator::Start() {$/;"	f	class:LdmIntegrator
Start	protocol/TcpServer.cpp	/^void TcpServer::Start() {$/;"	f	class:TcpServer
Start	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::Start() {$/;"	f	class:VCMTPReceiver
StartCountThread	CommUtil/PerformanceCounter.cpp	/^void* PerformanceCounter::StartCountThread(void* ptr) {$/;"	f	class:PerformanceCounter
StartExecutionProcess	CommUtil/StatusProxy.cpp	/^void StatusProxy::StartExecutionProcess() {$/;"	f	class:StatusProxy
StartExperiment	protocol/ExperimentManager.cpp	/^void ExperimentManager::StartExperiment(SenderStatusProxy* sender_proxy, VCMTPSender* sender) {$/;"	f	class:ExperimentManager
StartExperiment	protocol/ExperimentManager2.cpp	/^void ExperimentManager2::StartExperiment(SenderStatusProxy* sender_proxy, VCMTPSender* sender) {$/;"	f	class:ExperimentManager2
StartExperiment2	protocol/ExperimentManager2.cpp	/^void ExperimentManager2::StartExperiment2(SenderStatusProxy* sender_proxy, VCMTPSender* sender) {$/;"	f	class:ExperimentManager2
StartExperimentLowSpeed	protocol/ExperimentManager.cpp	/^void ExperimentManager::StartExperimentLowSpeed(SenderStatusProxy* sender_proxy, VCMTPSender* sender) {$/;"	f	class:ExperimentManager
StartExperimentRetrans	protocol/ExperimentManager.cpp	/^void ExperimentManager::StartExperimentRetrans(SenderStatusProxy* sender_proxy, VCMTPSender* sender) {$/;"	f	class:ExperimentManager
StartManagerReceiveThread	CommUtil/StatusProxy.cpp	/^void* StatusProxy::StartManagerReceiveThread(void* ptr) {$/;"	f	class:StatusProxy
StartManagerSendThread	CommUtil/StatusProxy.cpp	/^void* StatusProxy::StartManagerSendThread(void* ptr) {$/;"	f	class:StatusProxy
StartNewRetransThread	protocol/VCMTPSender.cpp	/^void VCMTPSender::StartNewRetransThread(int sock_fd) {$/;"	f	class:VCMTPSender
StartProcessExecutionThread	CommUtil/StatusProxy.cpp	/^void* StatusProxy::StartProcessExecutionThread(void* ptr) {$/;"	f	class:StatusProxy
StartReceiveThread	protocol/LdmIntegrator.cpp	/^void* LdmIntegrator::StartReceiveThread(void* ptr) {$/;"	f	class:LdmIntegrator
StartReceiverThread	protocol/ReceiverStatusProxy.cpp	/^void* ReceiverStatusProxy::StartReceiverThread(void* ptr) {$/;"	f	class:ReceiverStatusProxy
StartReceivingThread	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::StartReceivingThread() {$/;"	f	class:VCMTPReceiver
StartReceivingThread	protocol/VCMTPReceiver.cpp	/^void* VCMTPReceiver::StartReceivingThread(void* ptr) {$/;"	f	class:VCMTPReceiver
StartRetransThread	protocol/VCMTPSender.cpp	/^void* VCMTPSender::StartRetransThread(void* ptr) {$/;"	f	class:VCMTPSender
StartRetransThreadInfo	protocol/VCMTPSender.h	/^struct StartRetransThreadInfo {$/;"	s
StartRetransmissionThread	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::StartRetransmissionThread() {$/;"	f	class:VCMTPReceiver
StartRetransmissionThread	protocol/VCMTPReceiver.cpp	/^void* VCMTPReceiver::StartRetransmissionThread(void* ptr) {$/;"	f	class:VCMTPReceiver
StartRetransmissionThread	protocol/VCMTPSender.cpp	/^void* VCMTPSender::StartRetransmissionThread(void* ptr) {$/;"	f	class:VCMTPSender
StartSendThread	protocol/LdmIntegrator.cpp	/^void* LdmIntegrator::StartSendThread(void* ptr) {$/;"	f	class:LdmIntegrator
StartServerThread	protocol/TcpServer.cpp	/^void* TcpServer::StartServerThread(void* ptr) {$/;"	f	class:TcpServer
StartService	CommUtil/StatusProxy.cpp	/^void StatusProxy::StartService() {$/;"	f	class:StatusProxy
StartStatusMonitor	starter/EmulabStarter.cpp	/^void StartStatusMonitor() {$/;"	f
StartTcpSendThread	protocol/VCMTPSender.cpp	/^void* VCMTPSender::StartTcpSendThread(void* ptr) {$/;"	f	class:VCMTPSender
StartTest	protocol/Tester.cpp	/^void Tester::StartTest() {$/;"	f	class:Tester
StartTimer	CommUtil/RateShaper.cpp	/^void RateShaper::StartTimer() {$/;"	f	class:RateShaper
StatusProxy	CommUtil/StatusProxy.cpp	/^StatusProxy::StatusProxy(string addr, int port) {$/;"	f	class:StatusProxy
StatusProxy	CommUtil/StatusProxy.h	/^class StatusProxy {$/;"	c
Stop	CommUtil/PerformanceCounter.cpp	/^void PerformanceCounter::Stop() {$/;"	f	class:PerformanceCounter
Stop	protocol/LdmIntegrator.cpp	/^void LdmIntegrator::Stop() {$/;"	f	class:LdmIntegrator
StopService	CommUtil/StatusProxy.cpp	/^void StatusProxy::StopService() {$/;"	f	class:StatusProxy
SysError	CommUtil/StatusProxy.cpp	/^void StatusProxy::SysError(string s) {$/;"	f	class:StatusProxy
SysError	protocol/TcpClient.cpp	/^void TcpClient::SysError(const char* info) {$/;"	f	class:TcpClient
SysError	protocol/TcpServer.cpp	/^void TcpServer::SysError(const char* info) {$/;"	f	class:TcpServer
SysError	protocol/vcmtp.cpp	/^void SysError(string s) {$/;"	f
TCPCLIENT_H_	protocol/TcpClient.h	/^#define TCPCLIENT_H_$/;"	d
TCPSERVER_H_	protocol/TcpServer.h	/^#define TCPSERVER_H_$/;"	d
TCP_FILE_TRANSFER_FINISH	protocol/vcmtp.h	/^static const int TCP_FILE_TRANSFER_FINISH = 11;$/;"	v
TCP_FILE_TRANSFER_START	protocol/vcmtp.h	/^static const int TCP_FILE_TRANSFER_START = 10;$/;"	v
TCP_MEMORY_TRANSFER_FINISH	protocol/vcmtp.h	/^static const int TCP_MEMORY_TRANSFER_FINISH = 9;$/;"	v
TCP_MEMORY_TRANSFER_START	protocol/vcmtp.h	/^static const int TCP_MEMORY_TRANSFER_START = 8;$/;"	v
TESTER_H_	protocol/Tester.h	/^#define TESTER_H_$/;"	d
TIMER_H_	CommUtil/Timer.h	/^#define TIMER_H_$/;"	d
TcpClient	protocol/TcpClient.cpp	/^TcpClient::TcpClient(const string serv_addr, const int port)$/;"	f	class:TcpClient
TcpClient	protocol/TcpClient.h	/^class TcpClient {$/;"	c
TcpReceiveFile	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::TcpReceiveFile(const VcmtpSenderMessage & transfer_msg) {$/;"	f	class:VCMTPReceiver
TcpReceiveMemoryData	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::TcpReceiveMemoryData(const VcmtpSenderMessage & msg, char* mem_data) {$/;"	f	class:VCMTPReceiver
TcpSendFile	protocol/VCMTPSender.cpp	/^void VCMTPSender::TcpSendFile(const char* file_name) {$/;"	f	class:VCMTPSender
TcpSendMemoryData	protocol/VCMTPSender.cpp	/^void VCMTPSender::TcpSendMemoryData(void* data, size_t length) {$/;"	f	class:VCMTPSender
TcpServer	protocol/TcpServer.cpp	/^TcpServer::TcpServer(int port, VCMTPSender* sender) {$/;"	f	class:TcpServer
TcpServer	protocol/TcpServer.h	/^class TcpServer {$/;"	c
TcpThreadInfo	protocol/VCMTPSender.cpp	/^struct TcpThreadInfo {$/;"	s	file:
TcpTransferFile	protocol/SenderStatusProxy.cpp	/^void SenderStatusProxy::TcpTransferFile(string file_name) {$/;"	f	class:SenderStatusProxy
TcpTransferMemoryData	protocol/SenderStatusProxy.cpp	/^int SenderStatusProxy::TcpTransferMemoryData(int size) {$/;"	f	class:SenderStatusProxy
Tester	protocol/Tester.cpp	/^Tester::Tester()$/;"	f	class:Tester
Tester	protocol/Tester.h	/^class Tester {$/;"	c
Timer	CommUtil/Timer.cpp	/^Timer::Timer() {$/;"	f	class:Timer
Timer	CommUtil/Timer.h	/^class Timer {$/;"	c
TransferDirectory	protocol/SenderStatusProxy.cpp	/^void SenderStatusProxy::TransferDirectory(string dir_name) {$/;"	f	class:SenderStatusProxy
TransferFile	protocol/SenderStatusProxy.cpp	/^void SenderStatusProxy::TransferFile(string file_name) {$/;"	f	class:SenderStatusProxy
TransferMemoryData	protocol/SenderStatusProxy.cpp	/^int SenderStatusProxy::TransferMemoryData(int size) {$/;"	f	class:SenderStatusProxy
TransferMessage	protocol/SenderStatusProxy.h	/^struct TransferMessage {$/;"	s
TransferMsgType	protocol/SenderStatusProxy.h	/^enum TransferMsgType {$/;"	g
TransferString	protocol/SenderStatusProxy.cpp	/^int SenderStatusProxy::TransferString(string str, bool send_out_packets) {$/;"	f	class:SenderStatusProxy
TransferType	protocol/VCMTPSender.h	/^enum TransferType  {MEMORY_TO_MEMORY_TRANSFER = 1, DISK_TO_DISK_TRANSFER};$/;"	g
UDPCOMM_H_	protocol/UdpComm.h	/^#define UDPCOMM_H_$/;"	d
UDP_PACKET_LEN	protocol/vcmtp.h	/^static const int UDP_PACKET_LEN = ETH_DATA_LEN;$/;"	v
UDP_VCMTP_DATA_LEN	protocol/vcmtp.h	/^static const int UDP_VCMTP_DATA_LEN = 1200 - sizeof(VCMTP_HEADER);$/;"	v
UDP_VCMTP_HLEN	protocol/vcmtp.h	/^static const int UDP_VCMTP_HLEN = sizeof(VCMTP_HEADER);$/;"	v
UDP_VCMTP_PACKET_LEN	protocol/vcmtp.h	/^static const int UDP_VCMTP_PACKET_LEN = 1460;$/;"	v
UdpComm	protocol/UdpComm.cpp	/^UdpComm::UdpComm(ushort port) {$/;"	f	class:UdpComm
UdpComm	protocol/UdpComm.h	/^class UdpComm {$/;"	c
VCMTP	protocol/vcmtp.h	/^class VCMTP {$/;"	c
VCMTPCOMM_H_	protocol/VCMTPComm.h	/^#define VCMTPCOMM_H_$/;"	d
VCMTPComm	protocol/VCMTPComm.cpp	/^VCMTPComm::VCMTPComm()$/;"	f	class:VCMTPComm
VCMTPComm	protocol/VCMTPComm.h	/^class VCMTPComm {$/;"	c
VCMTPEVENTQUEUEMANAGER_H_	protocol/VcmtpEventQueueManager.h	/^#define VCMTPEVENTQUEUEMANAGER_H_$/;"	d
VCMTPInit	protocol/vcmtp.cpp	/^void VCMTPInit() {$/;"	f
VCMTPRECEIVER_H_	protocol/VCMTPReceiver.h	/^#define VCMTPRECEIVER_H_$/;"	d
VCMTPReceiver	protocol/VCMTPReceiver.cpp	/^VCMTPReceiver::VCMTPReceiver($/;"	f	class:VCMTPReceiver
VCMTPReceiver	protocol/VCMTPReceiver.h	/^class VCMTPReceiver : public VCMTPComm {$/;"	c
VCMTPSENDERMETADATA_H_	protocol/VcmtpSenderMetadata.h	/^#define VCMTPSENDERMETADATA_H_$/;"	d
VCMTPSENDER_H_	protocol/VCMTPSender.h	/^#define VCMTPSENDER_H_$/;"	d
VCMTPSender	protocol/VCMTPSender.cpp	/^VCMTPSender::VCMTPSender($/;"	f	class:VCMTPSender
VCMTPSender	protocol/VCMTPSender.h	/^class VCMTPSender : public VCMTPComm {$/;"	c
VCMTP_BOF	protocol/vcmtp.h	/^const u_int32_t VCMTP_BOF = 0x00000001;				\/\/ begin of file$/;"	v
VCMTP_BOF_RECVED	protocol/VcmtpEventQueueManager.h	/^#define VCMTP_BOF_RECVED	/;"	d
VCMTP_BOF_REQ	protocol/vcmtp.h	/^const u_int32_t VCMTP_BOF_REQ = 0x00000080;     	\/\/ BOF request$/;"	v
VCMTP_DATA	protocol/vcmtp.h	/^const u_int32_t VCMTP_DATA = 0x00000000;			\/\/ data packet$/;"	v
VCMTP_DATA_LEN	protocol/vcmtp.h	/^const static int VCMTP_DATA_LEN = VCMTP_PACKET_LEN - sizeof(VCMTP_HEADER); \/\/ETH_FRAME_LEN - ETH_HLEN - sizeof(VCMTP_HEADER);$/;"	v
VCMTP_EOF	protocol/vcmtp.h	/^const u_int32_t VCMTP_EOF = 0x00000002;				\/\/ end of file$/;"	v
VCMTP_ETH_FRAME_LEN	protocol/vcmtp.h	/^const static int VCMTP_ETH_FRAME_LEN = 1460 + ETH_HLEN;$/;"	v
VCMTP_HEADER	protocol/vcmtp.h	/^} VCMTP_HEADER, *PTR_VCMTP_HEADER;$/;"	t	typeref:struct:VcmtpHeader
VCMTP_HISTORY_STATISTICS	protocol/vcmtp.h	/^const u_int32_t VCMTP_HISTORY_STATISTICS = 0x00000100;$/;"	v
VCMTP_HLEN	protocol/vcmtp.h	/^const static int VCMTP_HLEN = sizeof(VCMTP_HEADER);$/;"	v
VCMTP_H_	protocol/vcmtp.h	/^#define VCMTP_H_$/;"	d
VCMTP_MSG_RECV_FAILED	protocol/VcmtpEventQueueManager.h	/^#define VCMTP_MSG_RECV_FAILED	/;"	d
VCMTP_MSG_RECV_SUCCESS	protocol/VcmtpEventQueueManager.h	/^#define VCMTP_MSG_RECV_SUCCESS	/;"	d
VCMTP_MSG_SEND_FAILED	protocol/VcmtpEventQueueManager.h	/^#define VCMTP_MSG_SEND_FAILED	/;"	d
VCMTP_MSG_SEND_SUCCESS	protocol/VcmtpEventQueueManager.h	/^#define VCMTP_MSG_SEND_SUCCESS /;"	d
VCMTP_PACKET_LEN	protocol/vcmtp.h	/^const static int VCMTP_PACKET_LEN = 1460; \/\/ETH_FRAME_LEN - ETH_HLEN;$/;"	v
VCMTP_PROTO_TYPE	protocol/vcmtp.h	/^const static ushort VCMTP_PROTO_TYPE = 0x0001;$/;"	v
VCMTP_RETRANS_DATA	protocol/vcmtp.h	/^const u_int32_t VCMTP_RETRANS_DATA = 0x00000010; 	\/\/ retransmission data$/;"	v
VCMTP_RETRANS_END	protocol/vcmtp.h	/^const u_int32_t VCMTP_RETRANS_END = 0x00000020;$/;"	v
VCMTP_RETRANS_REQ	protocol/vcmtp.h	/^const u_int32_t VCMTP_RETRANS_REQ = 0x00000008;		\/\/ retransmission request$/;"	v
VCMTP_RETRANS_TIMEOUT	protocol/vcmtp.h	/^const u_int32_t VCMTP_RETRANS_TIMEOUT = 0x00000040; \/\/ retransmission timeout message$/;"	v
VCMTP_SENDER_MSG_EXP	protocol/vcmtp.h	/^const u_int32_t VCMTP_SENDER_MSG_EXP = 0x00000004;	\/\/ sender messages used for experiment$/;"	v
VcmtpEventQueueManager	protocol/VcmtpEventQueueManager.cpp	/^VcmtpEventQueueManager::VcmtpEventQueueManager() {$/;"	f	class:VcmtpEventQueueManager
VcmtpEventQueueManager	protocol/VcmtpEventQueueManager.h	/^class VcmtpEventQueueManager {$/;"	c
VcmtpFileEntry	protocol/VcmtpFileEntry.h	/^    VcmtpFileEntry(const struct VcmtpSenderMessage& msg)$/;"	f	class:VcmtpFileEntry
VcmtpFileEntry	protocol/VcmtpFileEntry.h	/^class VcmtpFileEntry {$/;"	c
VcmtpHeader	protocol/vcmtp.h	/^typedef struct VcmtpHeader {$/;"	s
VcmtpMessageInfo	protocol/vcmtp.h	/^struct VcmtpMessageInfo {$/;"	s
VcmtpMsgTransferEvent	protocol/VcmtpEventQueueManager.h	/^struct VcmtpMsgTransferEvent {$/;"	s
VcmtpMulticastTaskInfo	protocol/VCMTPSender.h	/^struct VcmtpMulticastTaskInfo {$/;"	s
VcmtpNackMessage	protocol/vcmtp.h	/^typedef struct VcmtpNackMessage {$/;"	s
VcmtpNackMsg	protocol/vcmtp.h	/^struct VcmtpNackMsg {$/;"	s
VcmtpReceiverConfig	protocol/VCMTPReceiver.h	/^struct VcmtpReceiverConfig {$/;"	s
VcmtpReceiverStats	protocol/VCMTPReceiver.h	/^struct VcmtpReceiverStats {$/;"	s
VcmtpRetransBuffer	protocol/VCMTPSender.h	/^	VcmtpRetransBuffer() {$/;"	f	struct:VcmtpRetransBuffer
VcmtpRetransBuffer	protocol/VCMTPSender.h	/^struct VcmtpRetransBuffer {$/;"	s
VcmtpRetransMessage	protocol/vcmtp.h	/^struct VcmtpRetransMessage {$/;"	s
VcmtpRetransRequest	protocol/vcmtp.h	/^struct VcmtpRetransRequest {$/;"	s
VcmtpSenderConfig	protocol/VCMTPSender.h	/^struct VcmtpSenderConfig {$/;"	s
VcmtpSenderMessage	protocol/vcmtp.h	/^struct VcmtpSenderMessage {$/;"	s
VcmtpSenderMetadata	protocol/VcmtpSenderMetadata.cpp	/^VcmtpSenderMetadata::VcmtpSenderMetadata() {$/;"	f	class:VcmtpSenderMetadata
VcmtpSenderMetadata	protocol/VcmtpSenderMetadata.h	/^class VcmtpSenderMetadata {$/;"	c
VcmtpSenderStats	protocol/VCMTPSender.h	/^struct VcmtpSenderStats {$/;"	s
WARNING	CommUtil/CommUtil.h	/^    WARNING = 4,$/;"	e	enum:MsgType
WaitForNewToken	protocol/RawSocketComm.cpp	/^void RawSocketComm::WaitForNewToken() {$/;"	f	class:RawSocketComm
_FILE_OFFSET_BITS	protocol/vcmtp.h	/^#define _FILE_OFFSET_BITS /;"	d
_LARGEFILE64_SOURCE	protocol/vcmtp.h	/^#define _LARGEFILE64_SOURCE /;"	d
_LARGEFILE_SOURCE	protocol/vcmtp.h	/^#define _LARGEFILE_SOURCE /;"	d
aio_info	protocol/VCMTPReceiver.cpp	/^struct aio_info {$/;"	s	file:
app_notify_queue	protocol/VcmtpEventQueueManager.h	/^	EventQueue* app_notify_queue;$/;"	m	class:VcmtpEventQueueManager
bind_mac_addr	protocol/RawSocketComm.h	/^	unsigned char bind_mac_addr[6];			\/\/ accepted dest MAC address for received frames$/;"	m	class:RawSocketComm
bofResponse	protocol/VcmtpFileEntry.h	/^    const BofResponse*                  bofResponse;$/;"	m	class:VcmtpFileEntry
bucket_volume	CommUtil/RateShaper.h	/^	int bucket_volume;$/;"	m	class:RateShaper
buf	protocol/BofResponse.h	/^    char*       buf;$/;"	m	class:MemoryBofResponse
buf	test/protocol/BofResponse/BofResponse.h	/^    char*       buf;$/;"	m	class:MemoryBofResponse
buf_size_limit	protocol/EventQueue.h	/^	int 				buf_size_limit;$/;"	m	class:EventQueue
buff_size	protocol/ExperimentManager.h	/^	int buff_size;$/;"	m	class:ExperimentManager
buffer	protocol/VCMTPSender.h	/^	char 	buffer[BUFFER_PACKET_SIZE * VCMTP_PACKET_LEN];  \/\/ 8MB buffer size$/;"	m	struct:VcmtpRetransBuffer
buffer	protocol/VcmtpSenderMetadata.h	/^	void* buffer;$/;"	m	struct:MemoryMessageMetadata
buffer_size	protocol/ReceiverStatusProxy.h	/^	int			buffer_size;$/;"	m	class:ReceiverStatusProxy
buffer_size	protocol/SenderStatusProxy.h	/^	int			buffer_size;$/;"	m	class:SenderStatusProxy
conn_sock_list	protocol/TcpServer.h	/^	list<int> 	conn_sock_list;$/;"	m	class:TcpServer
count_thread	CommUtil/PerformanceCounter.h	/^	pthread_t count_thread;$/;"	m	class:PerformanceCounter
cpu_counter	CommUtil/RateShaper.h	/^	CpuCycleCounter cpu_counter;$/;"	m	class:RateShaper
cpu_counter	protocol/VCMTPReceiver.h	/^	CpuCycleCounter		cpu_counter, global_timer;$/;"	m	class:VCMTPReceiver
cpu_counter	protocol/VCMTPSender.h	/^	CpuCycleCounter		cpu_counter, global_timer;		\/\/ counter for elapsed CPU cycles$/;"	m	class:VCMTPSender
cpu_info	protocol/VCMTPReceiver.h	/^	PerformanceCounter 	cpu_info;$/;"	m	class:VCMTPReceiver
cpu_monitor	protocol/VCMTPReceiver.h	/^	PerformanceCounter	cpu_monitor;$/;"	m	struct:VcmtpReceiverStats
cpu_usage	protocol/VCMTPSender.h	/^	uint	cpu_usage;		\/\/ in percentage$/;"	m	struct:VcmtpSenderStats
cpu_values	CommUtil/PerformanceCounter.h	/^	vector<int>		cpu_values;$/;"	m	class:PerformanceCounter
cur_buf_size	protocol/EventQueue.h	/^	int 				cur_buf_size;$/;"	m	class:EventQueue
cur_pos	protocol/VCMTPSender.h	/^	char*	cur_pos;$/;"	m	struct:VcmtpRetransBuffer
cur_session_id	protocol/VCMTPSender.h	/^	u_int32_t			cur_session_id;		\/\/ the session ID for a new transfer$/;"	m	class:VCMTPSender
current_msg_id	protocol/VCMTPReceiver.h	/^	uint	current_msg_id;$/;"	m	struct:VcmtpReceiverStats
current_offset	protocol/VCMTPReceiver.h	/^	uint		current_offset;$/;"	m	struct:MessageReceiveStatus
current_size_token	protocol/RawSocketComm.h	/^	size_t current_size_token;$/;"	m	class:RawSocketComm
data	protocol/RawSocketComm.h	/^	u_char 		data[ETH_DATA_LEN];$/;"	m	struct:MacFrame
data	protocol/vcmtp.h	/^	char*		data;$/;"	m	struct:PacketBuffer
data_buffer	protocol/VCMTPReceiver.cpp	/^	char*	data_buffer;$/;"	m	struct:aio_info	file:
data_len	protocol/SenderStatusProxy.h	/^	 size_t 			data_len;$/;"	m	struct:TransferMessage
data_len	protocol/vcmtp.h	/^	size_t		data_len;$/;"	m	struct:PacketBuffer
data_len	protocol/vcmtp.h	/^	u_int32_t	data_len;$/;"	m	struct:VcmtpHeader
data_len	protocol/vcmtp.h	/^	u_int32_t	data_len;$/;"	m	struct:VcmtpNackMessage
data_len	protocol/vcmtp.h	/^	u_int32_t	data_len;$/;"	m	struct:VcmtpRetransRequest
data_len	protocol/vcmtp.h	/^	uint32_t 	data_len;$/;"	m	struct:VcmtpSenderMessage
data_lens	protocol/vcmtp.h	/^	u_int32_t	data_lens[MAX_NUM_NACK_REQ];$/;"	m	struct:VcmtpRetransMessage
dest_address	protocol/RawSocketComm.h	/^	struct sockaddr_ll dest_address; 	\/\/ target address$/;"	m	class:RawSocketComm	typeref:struct:RawSocketComm::sockaddr_ll
dest_port	protocol/vcmtp.h	/^	u_int16_t	dest_port;$/;"	m	struct:VcmtpHeader
dispose	protocol/BofResponse.cpp	/^size_t MemoryBofResponse::dispose($/;"	f	class:MemoryBofResponse
dispose	test/protocol/BofResponse/BofResponse.cpp	/^size_t MemoryBofResponse::dispose($/;"	f	class:MemoryBofResponse
dispose	test/protocol/BofResponse/BofResponse.h	/^    virtual size_t dispose(int sock, off_t offset, size_t nbytes) const {};$/;"	f	class:BofResponse
dst_addr	protocol/MulticastComm.h	/^	SA dst_addr;$/;"	m	class:MulticastComm
dst_addr	protocol/RawSocketComm.h	/^	u_char 		dst_addr[ETH_ALEN];$/;"	m	struct:MacFrame
dst_addr_len	protocol/MulticastComm.h	/^	int dst_addr_len;$/;"	m	class:MulticastComm
dummy_linking_variable	dummy.c	/^int dummy_linking_variable = 0;$/;"	v
end_pos	protocol/VCMTPSender.h	/^	char*	end_pos;$/;"	m	struct:VcmtpRetransBuffer
eth_header	protocol/VCMTPComm.h	/^	struct ethhdr* eth_header;$/;"	m	class:VCMTPComm	typeref:struct:VCMTPComm::ethhdr
eth_header	protocol/vcmtp.h	/^	char*		eth_header;$/;"	m	struct:PacketBuffer
event_data	protocol/EventQueue.h	/^	void* 	event_data;$/;"	m	struct:EventObject
event_list	protocol/EventQueue.h	/^	list<EventObject> 	event_list;$/;"	m	class:EventQueue
event_type	protocol/EventQueue.h	/^	int		event_type;$/;"	m	struct:EventObject
event_type	protocol/VcmtpEventQueueManager.h	/^	int			event_type;$/;"	m	struct:VcmtpMsgTransferEvent
execution_pid	CommUtil/StatusProxy.h	/^	int 	execution_pid;$/;"	m	class:StatusProxy
exp_manager	protocol/SenderStatusProxy.h	/^	ExperimentManager  	exp_manager;$/;"	m	class:SenderStatusProxy
exp_manager2	protocol/SenderStatusProxy.h	/^	ExperimentManager2	exp_manager2;$/;"	m	class:SenderStatusProxy
exp_type	protocol/ExperimentManager.h	/^	int exp_type;$/;"	m	class:ExperimentManager
file_descriptor	protocol/VCMTPReceiver.h	/^			int		file_descriptor;$/;"	m	union:MessageReceiveStatus::__anon1
file_descriptor	protocol/VcmtpSenderMetadata.h	/^	int  	file_descriptor;			\/\/when initialized, its value should be -1$/;"	m	struct:FileMessageMetadata
file_name	protocol/SenderStatusProxy.h	/^	 char       		file_name[30];$/;"	m	struct:TransferMessage
file_name	protocol/VCMTPSender.cpp	/^	char file_name[256];$/;"	m	struct:TcpThreadInfo	file:
file_name	protocol/VCMTPSender.cpp	/^	const char*	file_name;$/;"	m	struct:RetransThreadStartInfo	file:
file_name	protocol/VCMTPSender.h	/^	char 	file_name[256];$/;"	m	struct:VcmtpMulticastTaskInfo
file_name	protocol/VcmtpSenderMetadata.h	/^	string 	file_name;$/;"	m	struct:FileMessageMetadata
file_retx_timeout_ratio	protocol/SenderStatusProxy.h	/^	int			file_retx_timeout_ratio;$/;"	m	class:SenderStatusProxy
file_size	protocol/ExperimentManager.h	/^	ulong file_size;$/;"	m	class:ExperimentManager
file_sizes	protocol/ExperimentManager2.h	/^	vector<int> file_sizes;$/;"	m	struct:File_Sample
finished_node_count	protocol/ExperimentManager.h	/^	int finished_node_count;$/;"	m	class:ExperimentManager
finished_node_count	protocol/ExperimentManager2.h	/^	int finished_node_count;$/;"	m	class:ExperimentManager2
flags	protocol/vcmtp.h	/^	u_int32_t	flags;$/;"	m	struct:VcmtpHeader
frame_buffer	protocol/RawSocketComm.h	/^#define frame_buffer	/;"	d
getBofResponse	protocol/VcmtpFileEntry.h	/^    const BofResponse* getBofResponse() {$/;"	f	class:VcmtpFileEntry
getBuf	protocol/BofResponse.h	/^    char* getBuf() const { return buf; }$/;"	f	class:MemoryBofResponse
getBuf	test/protocol/BofResponse/BofResponse.h	/^    char* getBuf() const { return buf; }$/;"	f	class:MemoryBofResponse
getFileId	protocol/VcmtpFileEntry.h	/^    const uint32_t getFileId() const {$/;"	f	class:VcmtpFileEntry
getIgnore	protocol/BofResponse.cpp	/^const BofResponse* BofResponse::getIgnore()$/;"	f	class:BofResponse
getIgnore	test/protocol/BofResponse/BofResponse.cpp	/^const BofResponse* BofResponse::getIgnore()$/;"	f	class:BofResponse
getName	protocol/VcmtpFileEntry.h	/^    const char* getName() const {$/;"	f	class:VcmtpFileEntry
getSize	protocol/VcmtpFileEntry.h	/^    size_t getSize() const {$/;"	f	class:VcmtpFileEntry
global_timer	protocol/VCMTPReceiver.h	/^	CpuCycleCounter		cpu_counter, global_timer;$/;"	m	class:VCMTPReceiver
global_timer	protocol/VCMTPSender.h	/^	CpuCycleCounter		cpu_counter, global_timer;		\/\/ counter for elapsed CPU cycles$/;"	m	class:VCMTPSender
group_addr	protocol/VCMTPComm.h	/^	string 		group_addr;$/;"	m	class:VCMTPComm
group_id	protocol/vcmtp.h	/^const static string group_id = "224.1.2.3";$/;"	v
group_mac_addr	protocol/vcmtp.h	/^const static unsigned char group_mac_addr[6] = {0x01, 0x00, 0x5e, 0x01, 0x02, 0x03};$/;"	v
hi	CommUtil/Timer.h	/^	unsigned hi;$/;"	m	struct:CpuCycleCounter
if_index	protocol/RawSocketComm.h	/^	int if_index;$/;"	m	class:RawSocketComm
if_ip	protocol/VCMTPComm.h	/^	string if_name, if_ip;$/;"	m	class:VCMTPComm
if_manager	protocol/VCMTPComm.h	/^	NetInterfaceManager* if_manager;$/;"	m	class:VCMTPComm
if_name	protocol/VCMTPComm.h	/^	string if_name, if_ip;$/;"	m	class:VCMTPComm
if_req	protocol/RawSocketComm.h	/^	struct ifreq if_req;$/;"	m	class:RawSocketComm	typeref:struct:RawSocketComm::ifreq
ifi_addr	protocol/NetInterfaceManager.h	/^	struct sockaddr*	ifi_addr;		\/\/ primary address$/;"	m	struct:ifi_info	typeref:struct:ifi_info::sockaddr
ifi_brdaddr	protocol/NetInterfaceManager.h	/^	struct sockaddr*	ifi_brdaddr;	\/\/ broadcast address$/;"	m	struct:ifi_info	typeref:struct:ifi_info::sockaddr
ifi_dstaddr	protocol/NetInterfaceManager.h	/^	struct sockaddr*	ifi_dstaddr;	\/\/ destination address$/;"	m	struct:ifi_info	typeref:struct:ifi_info::sockaddr
ifi_flags	protocol/NetInterfaceManager.h	/^	short 		ifi_flags;				\/\/ IFF_xxx constants from <net\/if.h>$/;"	m	struct:ifi_info
ifi_haddr	protocol/NetInterfaceManager.h	/^	u_char		ifi_haddr[IFI_HADDR];	\/\/ hardware address$/;"	m	struct:ifi_info
ifi_head	protocol/NetInterfaceManager.h	/^	PTR_IFI_INFO ifi_head;$/;"	m	class:NetInterfaceManager
ifi_hlen	protocol/NetInterfaceManager.h	/^	u_short		ifi_hlen;				\/\/ #bytes in hardware address: 0, 6, 8$/;"	m	struct:ifi_info
ifi_info	protocol/NetInterfaceManager.h	/^typedef struct ifi_info {$/;"	s
ifi_myflags	protocol/NetInterfaceManager.h	/^	short 		ifi_myflags;			\/\/ our own IFI_XXX flags$/;"	m	struct:ifi_info
ifi_name	protocol/NetInterfaceManager.h	/^	char		ifi_name[IFI_NAME];		\/\/ interface name, null terminated$/;"	m	struct:ifi_info
ifi_next	protocol/NetInterfaceManager.h	/^	struct ifi_info*	ifi_next;		\/\/ next of ifi_info$/;"	m	struct:ifi_info	typeref:struct:ifi_info::ifi_info
ignore_file	protocol/VcmtpSenderMetadata.h	/^	bool					ignore_file;$/;"	m	struct:MessageMetadata
info	protocol/VcmtpSenderMetadata.h	/^    void* 					info;                   	\/\/ the pointer to any auxiliary data that the user wants to pass$/;"	m	struct:MessageMetadata
init	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::init()$/;"	f	class:VCMTPReceiver
integrator	protocol/SenderStatusProxy.h	/^	LdmIntegrator* integrator;$/;"	m	class:SenderStatusProxy
inter_arrival_times	protocol/ExperimentManager2.h	/^	vector<double> inter_arrival_times;$/;"	m	struct:File_Sample
interval	CommUtil/PerformanceCounter.h	/^	int 	interval;   \/\/ measurement interval in milliseconds$/;"	m	class:PerformanceCounter
isConnected	CommUtil/StatusProxy.h	/^	bool isConnected;$/;"	m	class:StatusProxy
isMemoryTransfer	protocol/VcmtpFileEntry.h	/^    bool isMemoryTransfer() const {$/;"	f	class:VcmtpFileEntry
isWanted	protocol/BofResponse.h	/^    bool isWanted() const {$/;"	f	class:BofResponse
isWanted	protocol/VcmtpFileEntry.h	/^    bool isWanted() const {$/;"	f	class:VcmtpFileEntry
isWanted	test/protocol/BofResponse/BofResponse.h	/^    bool isWanted() const {$/;"	f	class:BofResponse
is_connected	CommUtil/StatusProxy.h	/^	bool is_connected;$/;"	m	class:StatusProxy
is_debug	protocol/vcmtp.h	/^const static bool is_debug = true;$/;"	v
is_disk_file	protocol/VcmtpSenderMetadata.h	/^    bool 					is_disk_file;          		\/\/ true for disk file transfer, false for memory transfer$/;"	m	struct:MessageMetadata
is_log_enabled	protocol/vcmtp.cpp	/^bool VCMTP::is_log_enabled;$/;"	m	class:VCMTP	file:
is_log_enabled	protocol/vcmtp.h	/^	static bool is_log_enabled;$/;"	m	class:VCMTP
is_multicast_done	protocol/VCMTPReceiver.h	/^	bool		is_multicast_done;$/;"	m	struct:MessageReceiveStatus
is_multicast_finished	protocol/VCMTPReceiver.h	/^	bool	        is_multicast_finished;$/;"	m	class:VCMTPReceiver
is_restarting	CommUtil/StatusProxy.h	/^	bool is_restarting;$/;"	m	class:StatusProxy
is_wanted	protocol/BofResponse.h	/^    bool is_wanted;$/;"	m	class:BofResponse
is_wanted	test/protocol/BofResponse/BofResponse.h	/^    bool is_wanted;$/;"	m	class:BofResponse
keep_alive	CommUtil/StatusProxy.h	/^	bool keep_alive;$/;"	m	class:StatusProxy
keep_alive	protocol/LdmIntegrator.h	/^	bool keep_alive;$/;"	m	class:LdmIntegrator
keep_quiet	CommUtil/StatusProxy.h	/^	bool keep_quiet;$/;"	m	class:StatusProxy
keep_retrans_alive	protocol/VCMTPReceiver.h	/^	bool				keep_retrans_alive;$/;"	m	class:VCMTPReceiver
keep_running	CommUtil/PerformanceCounter.h	/^	bool 	keep_running;$/;"	m	class:PerformanceCounter
last_check_time	CommUtil/RateShaper.h	/^	double last_check_time;$/;"	m	class:RateShaper
last_checked_counter	protocol/RawSocketComm.h	/^	CpuCycleCounter last_checked_counter;$/;"	m	class:RawSocketComm
last_file_recv_time	protocol/VCMTPReceiver.h	/^	double				last_file_recv_time;$/;"	m	struct:VcmtpReceiverStats
lo	CommUtil/Timer.h	/^	unsigned lo;$/;"	m	struct:CpuCycleCounter
log_file	protocol/vcmtp.cpp	/^FILE*  VCMTP::log_file = NULL;$/;"	m	class:VCMTP	file:
log_file	protocol/vcmtp.h	/^	static FILE*  log_file;$/;"	m	class:VCMTP
mac_addr	protocol/RawSocketComm.h	/^	unsigned char mac_addr[6];			\/\/ source MAC address$/;"	m	class:RawSocketComm
mac_group_addr	protocol/VCMTPComm.h	/^	u_char 		mac_group_addr[6];$/;"	m	class:VCMTPComm
main	starter/EmulabStarter.cpp	/^int main(int argc, char** argv) {$/;"	f
main	test/protocol/BofResponse/BofResponseTest.cpp	/^int main(int argc, char* argv[])$/;"	f
manager_recv_thread	CommUtil/StatusProxy.h	/^	pthread_t manager_recv_thread;$/;"	m	class:StatusProxy
manager_send_thread	CommUtil/StatusProxy.h	/^	pthread_t manager_send_thread;$/;"	m	class:StatusProxy
map_lock	protocol/VcmtpSenderMetadata.h	/^	pthread_rwlock_t 	map_lock;$/;"	m	class:VcmtpSenderMetadata
master_read_fds	protocol/TcpServer.h	/^	fd_set 		master_read_fds;$/;"	m	class:TcpServer
max_conn_sock	protocol/TcpServer.h	/^	int 		max_conn_sock;$/;"	m	class:TcpServer
max_num_receivers	protocol/VCMTPSender.h	/^	int 	max_num_receivers;$/;"	m	struct:VcmtpSenderConfig
max_num_retrans_buffs	protocol/VCMTPSender.h	/^	int					max_num_retrans_buffs;$/;"	m	class:VCMTPSender
max_sock_fd	protocol/VCMTPReceiver.h	/^	int		        max_sock_fd;$/;"	m	class:VCMTPReceiver
measure_cpu	CommUtil/PerformanceCounter.h	/^	bool    measure_cpu;$/;"	m	class:PerformanceCounter
measure_udp_recv_buffer	CommUtil/PerformanceCounter.h	/^	bool    measure_udp_recv_buffer;$/;"	m	class:PerformanceCounter
mem_buffer	protocol/VCMTPReceiver.h	/^			void* 	mem_buffer;$/;"	m	union:MessageReceiveStatus::__anon1
metadata	protocol/VCMTPSender.h	/^	VcmtpSenderMetadata			metadata;$/;"	m	class:VCMTPSender
metadata_lock	protocol/VcmtpSenderMetadata.h	/^	pthread_rwlock_t 	metadata_lock;$/;"	m	class:VcmtpSenderMetadata
metadata_map	protocol/VcmtpSenderMetadata.h	/^	map<uint, MessageMetadata*> metadata_map;	\/\/ the map from message id to the pointer to the message metadata$/;"	m	class:VcmtpSenderMetadata
missing_packet_map	protocol/VCMTPSender.cpp	/^	map<int, list<NACK_MSG> >* missing_packet_map;$/;"	m	struct:RetransThreadStartInfo	file:
mreq	protocol/MulticastComm.h	/^	ip_mreq mreq;$/;"	m	class:MulticastComm
msg	protocol/VcmtpFileEntry.h	/^    const struct VcmtpSenderMessage     msg;$/;"	m	class:VcmtpFileEntry	typeref:struct:VcmtpFileEntry::VcmtpSenderMessage
msg_id	protocol/VCMTPReceiver.h	/^	uint 		msg_id;$/;"	m	struct:MessageReceiveStatus
msg_id	protocol/VcmtpEventQueueManager.h	/^	u_int32_t 	msg_id;$/;"	m	struct:VcmtpMsgTransferEvent
msg_id	protocol/VcmtpSenderMetadata.h	/^	u_int32_t 				msg_id;$/;"	m	struct:MessageMetadata
msg_id	protocol/vcmtp.h	/^	u_int32_t	msg_id;$/;"	m	struct:VcmtpRetransRequest
msg_id	protocol/vcmtp.h	/^	u_int32_t 	msg_id;$/;"	m	struct:VcmtpMessageInfo
msg_length	protocol/VCMTPReceiver.h	/^	long long 	msg_length;$/;"	m	struct:MessageReceiveStatus
msg_length	protocol/VcmtpEventQueueManager.h	/^	long long 	msg_length;$/;"	m	struct:VcmtpMsgTransferEvent
msg_length	protocol/VcmtpSenderMetadata.h	/^    long long 				msg_length;    				\/\/ the length of the file$/;"	m	struct:MessageMetadata
msg_length	protocol/vcmtp.h	/^	long long 	msg_length;$/;"	m	struct:VcmtpMessageInfo
msg_name	protocol/VCMTPReceiver.h	/^	string		msg_name;$/;"	m	struct:MessageReceiveStatus
msg_name	protocol/VcmtpEventQueueManager.h	/^	char		msg_name[MAX_FILE_NAME_LENGTH];$/;"	m	struct:VcmtpMsgTransferEvent
msg_name	protocol/vcmtp.h	/^	char		msg_name[MAX_FILE_NAME_LENGTH];$/;"	m	struct:VcmtpMessageInfo
msg_type	protocol/SenderStatusProxy.h	/^	 TransferMsgType	msg_type;$/;"	m	struct:TransferMessage
msg_type	protocol/vcmtp.h	/^	int32_t		msg_type;$/;"	m	struct:VcmtpSenderMessage
multicast_addr	protocol/VCMTPReceiver.h	/^	string 	multicast_addr;$/;"	m	struct:VcmtpReceiverConfig
multicast_addr	protocol/VCMTPSender.h	/^	string 	multicast_addr;$/;"	m	struct:VcmtpSenderConfig
multicast_bytes	protocol/VCMTPReceiver.h	/^	long long	multicast_bytes;$/;"	m	struct:MessageReceiveStatus
multicast_packets	protocol/VCMTPReceiver.h	/^	long long	multicast_packets;$/;"	m	struct:MessageReceiveStatus
multicast_sock	protocol/VCMTPReceiver.h	/^	int 		        multicast_sock;$/;"	m	class:VCMTPReceiver
multicast_start_cpu_time	protocol/VcmtpSenderMetadata.h	/^    CpuCycleCounter			multicast_start_cpu_time;	\/\/ the CPU time counter when multicast is started$/;"	m	struct:MessageMetadata
multicast_task_info	protocol/VCMTPSender.h	/^	VcmtpMulticastTaskInfo 		multicast_task_info;$/;"	m	class:VCMTPSender
multicast_time	protocol/VCMTPReceiver.h	/^	double		multicast_time;$/;"	m	struct:MessageReceiveStatus
node_id	CommUtil/StatusProxy.h	/^	string node_id;$/;"	m	class:StatusProxy
notifier	protocol/VCMTPReceiver.h	/^	const ReceivingApplicationNotifier      notifier;$/;"	m	class:VCMTPReceiver
notify_of_bof	protocol/ReceivingApplicationNotifier.h	/^    virtual void notify_of_bof(VcmtpFileEntry& file_entry) const {};$/;"	f	class:ReceivingApplicationNotifier
notify_of_bof	protocol/VCMTPReceiver.cpp	/^bool VCMTPReceiver::BatchedNotifier::notify_of_bof(VcmtpSenderMessage& msg) {$/;"	f	class:VCMTPReceiver::BatchedNotifier
notify_of_eof	protocol/ReceivingApplicationNotifier.h	/^    virtual void notify_of_eof(VcmtpFileEntry& file_entry) {};$/;"	f	class:ReceivingApplicationNotifier
notify_of_eof	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::BatchedNotifier::notify_of_eof(VcmtpSenderMessage& msg) {$/;"	f	class:VCMTPReceiver::BatchedNotifier
notify_of_missed_file	protocol/ReceivingApplicationNotifier.h	/^    virtual void notify_of_missed_file(VcmtpFileEntry& file_entry) {};$/;"	f	class:ReceivingApplicationNotifier
notify_of_missed_file	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::BatchedNotifier::notify_of_missed_file($/;"	f	class:VCMTPReceiver::BatchedNotifier
num_bytes	protocol/EventQueue.h	/^	int 	num_bytes;$/;"	m	struct:EventObject
num_events	protocol/EventQueue.h	/^	int					num_events;$/;"	m	class:EventQueue
num_failed_files	protocol/VCMTPReceiver.h	/^	int					num_failed_files;$/;"	m	struct:VcmtpReceiverStats
num_missing_packets	protocol/vcmtp.h	/^	int32_t 	num_missing_packets;$/;"	m	struct:NackMsg
num_recved_files	protocol/VCMTPReceiver.h	/^	int					num_recved_files;$/;"	m	struct:VcmtpReceiverStats
num_requests	protocol/vcmtp.h	/^	int32_t		num_requests;$/;"	m	struct:VcmtpRetransMessage
num_retrans_thread	protocol/ExperimentManager.h	/^	int num_retrans_thread;$/;"	m	class:ExperimentManager
num_retrans_thread	protocol/ExperimentManager2.h	/^	int num_retrans_thread;$/;"	m	class:ExperimentManager2
num_retrans_threads	protocol/VCMTPSender.h	/^	int					num_retrans_threads;$/;"	m	class:VCMTPSender
num_retries	protocol/vcmtp.h	/^	short		num_retries;$/;"	m	struct:NackMsgInfo
num_test_nodes	protocol/ExperimentManager.h	/^	int num_test_nodes;$/;"	m	class:ExperimentManager
num_test_nodes	protocol/ExperimentManager2.h	/^	int num_test_nodes;$/;"	m	class:ExperimentManager2
operator <	protocol/vcmtp.cpp	/^bool operator<(const VcmtpNackMessage& l, const VcmtpNackMessage& r) {$/;"	f
operator ==	protocol/vcmtp.cpp	/^bool operator==(const VcmtpNackMessage& l, const VcmtpNackMessage& r) {$/;"	f
overflow_tolerance	CommUtil/RateShaper.h	/^	int overflow_tolerance;$/;"	m	class:RateShaper
packet_buffer	protocol/vcmtp.h	/^	char* 		packet_buffer;$/;"	m	struct:PacketBuffer
packet_id	protocol/vcmtp.h	/^	int32_t		packet_id;$/;"	m	struct:NackMsgInfo
packet_id	protocol/vcmtp.h	/^	int32_t 	packet_id;$/;"	m	struct:PacketBuffer
packet_id	protocol/vcmtp.h	/^	int32_t 	packet_id;$/;"	m	struct:VcmtpNackMsg
packet_ids	protocol/vcmtp.h	/^	int32_t 	packet_ids[MAX_NACK_IDS];$/;"	m	struct:NackMsg
packet_len	protocol/vcmtp.h	/^	size_t		packet_len;$/;"	m	struct:PacketBuffer
packet_loss_rate	protocol/VCMTPReceiver.h	/^	int 		        packet_loss_rate;$/;"	m	class:VCMTPReceiver
packet_received	protocol/vcmtp.h	/^	bool		packet_received;$/;"	m	struct:NackMsgInfo
param_set	protocol/ConfigInfo.h	/^	map<string, string> param_set;$/;"	m	class:ConfigInfo
payload_size	protocol/RawSocketComm.h	/^	int			payload_size;$/;"	m	struct:MacFrame
port_num	protocol/TcpServer.h	/^	int 		port_num;$/;"	m	class:TcpServer
port_num	protocol/VCMTPComm.h	/^	int			port_num;$/;"	m	class:VCMTPComm
printTestInfo	test/protocol/BofResponse/BofResponseTest.cpp	/^void printTestInfo()$/;"	f
proc_exec_thread	CommUtil/StatusProxy.h	/^	pthread_t proc_exec_thread;$/;"	m	class:StatusProxy
proto	protocol/RawSocketComm.h	/^	u_int16_t  	proto;$/;"	m	struct:MacFrame
proto	protocol/vcmtp.h	/^	int32_t 	proto;$/;"	m	struct:NackMsg
proto	protocol/vcmtp.h	/^	int32_t 	proto;$/;"	m	struct:VcmtpNackMsg
proxy	protocol/LdmIntegrator.h	/^	SenderStatusProxy* proxy;$/;"	m	class:LdmIntegrator
proxy_started	CommUtil/StatusProxy.h	/^	bool proxy_started;$/;"	m	class:StatusProxy
ptr	protocol/VCMTPSender.cpp	/^	VCMTPSender* ptr;$/;"	m	struct:TcpThreadInfo	file:
ptr_aiocb	protocol/VCMTPReceiver.cpp	/^	aiocb* 	ptr_aiocb;$/;"	m	struct:aio_info	file:
ptr_instance	protocol/ConfigInfo.cpp	/^ConfigInfo* ConfigInfo::ptr_instance = NULL;$/;"	m	class:ConfigInfo	file:
ptr_instance	protocol/ConfigInfo.h	/^	static ConfigInfo* ptr_instance;$/;"	m	class:ConfigInfo
ptr_memory_data	protocol/VCMTPSender.h	/^	char*	ptr_memory_data;$/;"	m	struct:VcmtpMulticastTaskInfo
ptr_monitor	starter/EmulabStarter.cpp	/^StatusProxy* ptr_monitor;$/;"	v
ptr_multicast_comm	protocol/VCMTPComm.h	/^	MulticastComm* ptr_multicast_comm;$/;"	m	class:VCMTPComm
ptr_raw_sock_comm	protocol/VCMTPComm.h	/^	RawSocketComm* ptr_raw_sock_comm;$/;"	m	class:VCMTPComm
ptr_receiver	protocol/ReceiverStatusProxy.h	/^	VCMTPReceiver* ptr_receiver;$/;"	m	class:ReceiverStatusProxy
ptr_retrans_fd_map	protocol/VCMTPSender.h	/^	map<uint, int>* ptr_retrans_fd_map;		\/\/ Opened file descriptor map for the retransmission.  Format: <msg_id, file_descriptor>$/;"	m	struct:StartRetransThreadInfo
ptr_sender	protocol/SenderStatusProxy.h	/^	VCMTPSender* ptr_sender;$/;"	m	class:SenderStatusProxy
ptr_sender	protocol/TcpServer.h	/^	VCMTPSender* ptr_sender;$/;"	m	class:TcpServer
ptr_status_proxy	protocol/Tester.h	/^	StatusProxy* 	ptr_status_proxy;$/;"	m	class:Tester
ptr_timeout_set	protocol/VCMTPSender.h	/^	set<uint>* 		ptr_timeout_set;		\/\/ A set that includes the unique id of all timeout messages$/;"	m	struct:StartRetransThreadInfo
ptr_vcmtp_receiver	protocol/Tester.h	/^	VCMTPReceiver* 	ptr_vcmtp_receiver;$/;"	m	class:Tester
ptr_vcmtp_sender	protocol/Tester.h	/^	VCMTPSender* 	ptr_vcmtp_sender;$/;"	m	class:Tester
queue_mutex	protocol/EventQueue.h	/^	pthread_mutex_t 	queue_mutex;$/;"	m	class:EventQueue
rate	CommUtil/RateShaper.h	/^	double rate;	\/\/ maximum rate in bytes per second$/;"	m	class:RateShaper
rate_shaper	protocol/VCMTPSender.h	/^	RateShaper			rate_shaper;$/;"	m	class:VCMTPSender
read_ahead_buffer	protocol/VCMTPReceiver.h	/^	char read_ahead_buffer[VCMTP_PACKET_LEN];$/;"	m	class:VCMTPReceiver
read_ahead_data	protocol/VCMTPReceiver.h	/^	char* read_ahead_data;$/;"	m	class:VCMTPReceiver
read_ahead_header	protocol/VCMTPReceiver.h	/^	VcmtpHeader* read_ahead_header;$/;"	m	class:VCMTPReceiver
read_pipe_fd	CommUtil/StatusProxy.h	/^	int		read_pipe_fd;$/;"	m	class:StatusProxy
read_pipe_fds	CommUtil/StatusProxy.h	/^	int		read_pipe_fds[2];$/;"	m	class:StatusProxy
read_sock_set	protocol/VCMTPReceiver.h	/^	fd_set		        read_sock_set;$/;"	m	class:VCMTPReceiver
receive_mode	protocol/VCMTPReceiver.h	/^	int		receive_mode;$/;"	m	struct:VcmtpReceiverConfig
received_retrans_bytes	protocol/VCMTPReceiver.h	/^	size_t	        received_retrans_bytes;$/;"	m	class:VCMTPReceiver
receiver	protocol/VCMTPReceiver.h	/^            VCMTPReceiver&      receiver;$/;"	m	class:VCMTPReceiver::BatchedNotifier
receiver_thread	protocol/ReceiverStatusProxy.h	/^	pthread_t receiver_thread;$/;"	m	class:ReceiverStatusProxy
recv_data	protocol/VCMTPComm.h	/^	u_char* recv_data;$/;"	m	class:VCMTPComm
recv_failed	protocol/VCMTPReceiver.h	/^	bool		recv_failed;$/;"	m	struct:MessageReceiveStatus
recv_file_map	protocol/VCMTPReceiver.h	/^	map<uint, int> 	recv_file_map;$/;"	m	class:VCMTPReceiver
recv_frame	protocol/RawSocketComm.h	/^	MacFrame send_frame, recv_frame;$/;"	m	class:RawSocketComm
recv_frame_buf	protocol/VCMTPComm.h	/^	char recv_frame_buf[ETH_FRAME_LEN];$/;"	m	class:VCMTPComm
recv_stats	protocol/VCMTPReceiver.h	/^	VcmtpReceiverStats 	recv_stats;$/;"	m	class:VCMTPReceiver
recv_status_map	protocol/VCMTPReceiver.h	/^	map<uint, MessageReceiveStatus> recv_status_map;$/;"	m	class:VCMTPReceiver
recv_thread	protocol/LdmIntegrator.h	/^	pthread_t  recv_thread;$/;"	m	class:LdmIntegrator
recv_thread	protocol/VCMTPReceiver.h	/^	pthread_t	recv_thread;$/;"	m	class:VCMTPReceiver
recv_thread_exited	protocol/LdmIntegrator.h	/^	bool recv_thread_exited;$/;"	m	class:LdmIntegrator
recv_vcmtp_header	protocol/VCMTPComm.h	/^	VCMTP_HEADER* recv_vcmtp_header;$/;"	m	class:VCMTPComm
reset_cpu_timer	protocol/VCMTPReceiver.h	/^	CpuCycleCounter		reset_cpu_timer;$/;"	m	struct:VcmtpReceiverStats
result_file	protocol/ExperimentManager.h	/^	ofstream result_file;$/;"	m	class:ExperimentManager
result_file	protocol/ExperimentManager2.h	/^	ofstream result_file;$/;"	m	class:ExperimentManager2
retrans_buff_size	protocol/ExperimentManager.h	/^	int retrans_buff_size;$/;"	m	class:ExperimentManager
retrans_finish_map	protocol/VCMTPSender.h	/^	map<int, bool>	retrans_finish_map;			\/\/first: socket_id;  second: whether the message retransmission has finished$/;"	m	class:VCMTPSender
retrans_info	protocol/VCMTPReceiver.h	/^	ofstream 	        retrans_info;$/;"	m	class:VCMTPReceiver
retrans_list	protocol/VCMTPReceiver.h	/^	list<VcmtpRetransRequest> 	retrans_list;$/;"	m	class:VCMTPReceiver
retrans_list_mutex	protocol/VCMTPReceiver.h	/^	pthread_mutex_t 	retrans_list_mutex;$/;"	m	class:VCMTPReceiver
retrans_scheme	protocol/ExperimentManager.h	/^	int retrans_scheme;$/;"	m	class:ExperimentManager
retrans_scheme	protocol/ExperimentManager2.h	/^	int retrans_scheme;$/;"	m	class:ExperimentManager2
retrans_scheme	protocol/VCMTPSender.h	/^	int					retrans_scheme;$/;"	m	class:VCMTPSender
retrans_sock_list	protocol/VCMTPSender.h	/^	list<int>	retrans_sock_list;$/;"	m	class:VCMTPSender
retrans_switch	protocol/VCMTPReceiver.h	/^	bool	        retrans_switch;		\/\/ a switch that allows\/disallows on-the-fly retransmission$/;"	m	class:VCMTPReceiver
retrans_switch_map	protocol/VCMTPSender.h	/^	map<int, bool>	retrans_switch_map; 		\/\/first: socket_id;  second: swtich to allow\/disallow retransmission on-the-fly$/;"	m	class:VCMTPSender
retrans_tcp_client	protocol/VCMTPReceiver.h	/^	TcpClient*	        retrans_tcp_client;$/;"	m	class:VCMTPReceiver
retrans_tcp_server	protocol/VCMTPSender.h	/^	TcpServer*			retrans_tcp_server;$/;"	m	class:VCMTPSender
retrans_tcp_sock	protocol/VCMTPReceiver.h	/^	int		        retrans_tcp_sock;$/;"	m	class:VCMTPReceiver
retrans_thread	protocol/VCMTPReceiver.h	/^	pthread_t			retrans_thread;$/;"	m	class:VCMTPReceiver
retrans_thread_map	protocol/VCMTPSender.h	/^	map<int, pthread_t*> retrans_thread_map;	\/\/first: socket id;  second: pthread_t pointer$/;"	m	class:VCMTPSender
retx_bytes	protocol/VCMTPReceiver.h	/^	long long 	retx_bytes;$/;"	m	struct:MessageReceiveStatus
retx_file_descriptor	protocol/VCMTPReceiver.h	/^	int			retx_file_descriptor;$/;"	m	struct:MessageReceiveStatus
retx_packets	protocol/VCMTPReceiver.h	/^	long long 	retx_packets;$/;"	m	struct:MessageReceiveStatus
retx_timeout_ratio	protocol/VcmtpSenderMetadata.h	/^    int		  				retx_timeout_ratio;			\/\/ the retransmission timeout in terms of a ratio of the total multicast time$/;"	m	struct:MessageMetadata
retx_timeout_seconds	protocol/VcmtpSenderMetadata.h	/^    double					retx_timeout_seconds;$/;"	m	struct:MessageMetadata
runBofResponseTest	test/protocol/BofResponse/BofResponseTest.cpp	/^        void runBofResponseTest()$/;"	f	class:BofResponseTest
runMemoryBofResponseTest	test/protocol/BofResponse/BofResponseTest.cpp	/^        void runMemoryBofResponseTest()$/;"	f	class:BofResponseTest
save_dir	protocol/LdmIntegrator.h	/^	string save_dir;$/;"	m	class:LdmIntegrator
send_data	protocol/VCMTPComm.h	/^	char* send_data;$/;"	m	class:VCMTPComm
send_frame	protocol/RawSocketComm.h	/^	MacFrame send_frame, recv_frame;$/;"	m	class:RawSocketComm
send_mutex	protocol/LdmIntegrator.h	/^	pthread_mutex_t send_mutex;$/;"	m	class:LdmIntegrator
send_packet_buf	protocol/VCMTPComm.h	/^	char send_packet_buf[ETH_DATA_LEN];$/;"	m	class:VCMTPComm
send_rate	protocol/ExperimentManager.h	/^	int send_rate;$/;"	m	class:ExperimentManager
send_rate	protocol/VCMTPSender.h	/^	int 	send_rate;$/;"	m	struct:VcmtpSenderConfig
send_rate_in_mbps	protocol/RawSocketComm.h	/^	int send_rate_in_mbps;$/;"	m	class:RawSocketComm
send_rate_in_mbps	protocol/VCMTPSender.h	/^	int send_rate_in_mbps;$/;"	m	class:VCMTPSender
send_stats	protocol/VCMTPSender.h	/^	VcmtpSenderStats	send_stats;			\/\/ data transfer statistics$/;"	m	class:VCMTPSender
send_thread	protocol/LdmIntegrator.h	/^	pthread_t  send_thread;$/;"	m	class:LdmIntegrator
send_thread_exited	protocol/LdmIntegrator.h	/^	bool send_thread_exited;$/;"	m	class:LdmIntegrator
send_time_adjust	protocol/VCMTPReceiver.h	/^	double		send_time_adjust;$/;"	m	struct:MessageReceiveStatus
send_vcmtp_header	protocol/VCMTPComm.h	/^	VCMTP_HEADER* send_vcmtp_header;$/;"	m	class:VCMTPComm
sender	protocol/ExperimentManager2.h	/^	VCMTPSender* sender;$/;"	m	class:ExperimentManager2
sender	protocol/LdmIntegrator.h	/^	VCMTPSender* sender;$/;"	m	class:LdmIntegrator
sender_ip_addr	protocol/VCMTPReceiver.h	/^	string  sender_ip_addr;$/;"	m	struct:VcmtpReceiverConfig
sender_proxy	protocol/ExperimentManager2.h	/^	SenderStatusProxy* sender_proxy;$/;"	m	class:ExperimentManager2
sender_ptr	protocol/VCMTPSender.cpp	/^	VCMTPSender* sender_ptr;$/;"	m	struct:RetransThreadStartInfo	file:
sender_ptr	protocol/VCMTPSender.h	/^	VCMTPSender* sender_ptr;$/;"	m	struct:StartRetransThreadInfo
sender_tcp_port	protocol/VCMTPReceiver.h	/^	int		sender_tcp_port;$/;"	m	struct:VcmtpReceiverConfig
seq_num	protocol/vcmtp.h	/^	u_int32_t 	seq_num;$/;"	m	struct:VcmtpNackMessage
seq_num	protocol/vcmtp.h	/^	u_int32_t 	seq_num;$/;"	m	struct:VcmtpRetransRequest
seq_number	protocol/vcmtp.h	/^	u_int32_t	seq_number;$/;"	m	struct:VcmtpHeader
seq_numbers	protocol/vcmtp.h	/^	u_int32_t	seq_numbers[MAX_NUM_NACK_REQ];$/;"	m	struct:VcmtpRetransMessage
servaddr	CommUtil/StatusProxy.h	/^	struct sockaddr_in servaddr;$/;"	m	class:StatusProxy	typeref:struct:StatusProxy::sockaddr_in
server_addr	protocol/TcpClient.h	/^	sockaddr_in server_addr;$/;"	m	class:TcpClient
server_addr	protocol/TcpServer.h	/^	struct sockaddr_in	server_addr;$/;"	m	class:TcpServer	typeref:struct:TcpServer::sockaddr_in
server_addr	protocol/UdpComm.h	/^	struct sockaddr_in server_addr;$/;"	m	class:UdpComm	typeref:struct:UdpComm::sockaddr_in
server_port	protocol/TcpClient.h	/^	int server_port;$/;"	m	class:TcpClient
server_sock	protocol/TcpServer.h	/^	int 		server_sock;$/;"	m	class:TcpServer
server_thread	protocol/TcpServer.h	/^	pthread_t server_thread;$/;"	m	class:TcpServer
session_id	protocol/VCMTPReceiver.h	/^	uint			session_id;$/;"	m	class:VCMTPReceiver
session_id	protocol/vcmtp.h	/^	u_int32_t 	session_id;$/;"	m	struct:VcmtpHeader
session_id	protocol/vcmtp.h	/^	uint32_t	session_id;$/;"	m	struct:VcmtpSenderMessage
session_recv_bytes	protocol/VCMTPReceiver.h	/^	uint	session_recv_bytes;$/;"	m	struct:VcmtpReceiverStats
session_recv_packets	protocol/VCMTPReceiver.h	/^	uint 	session_recv_packets;$/;"	m	struct:VcmtpReceiverStats
session_retrans_bytes	protocol/VCMTPReceiver.h	/^	uint	session_retrans_bytes;$/;"	m	struct:VcmtpReceiverStats
session_retrans_bytes	protocol/VCMTPSender.h	/^	uint	session_retrans_bytes;$/;"	m	struct:VcmtpSenderStats
session_retrans_bytes	protocol/VcmtpSenderMetadata.h	/^	uint	session_retrans_bytes;$/;"	m	struct:MessageTransferStats
session_retrans_packets	protocol/VCMTPReceiver.h	/^	uint 	session_retrans_packets;$/;"	m	struct:VcmtpReceiverStats
session_retrans_packets	protocol/VCMTPSender.h	/^	uint 	session_retrans_packets;$/;"	m	struct:VcmtpSenderStats
session_retrans_packets	protocol/VcmtpSenderMetadata.h	/^	uint 	session_retrans_packets;$/;"	m	struct:MessageTransferStats
session_retrans_percentage	protocol/VCMTPReceiver.h	/^	double	session_retrans_percentage;$/;"	m	struct:VcmtpReceiverStats
session_retrans_percentage	protocol/VCMTPSender.h	/^	double	session_retrans_percentage;$/;"	m	struct:VcmtpSenderStats
session_retrans_percentage	protocol/VcmtpSenderMetadata.h	/^	double	session_retrans_percentage;$/;"	m	struct:MessageTransferStats
session_retrans_time	protocol/VCMTPReceiver.h	/^	double 	session_retrans_time;$/;"	m	struct:VcmtpReceiverStats
session_retrans_time	protocol/VCMTPSender.h	/^	double 	session_retrans_time;$/;"	m	struct:VcmtpSenderStats
session_retrans_time	protocol/VcmtpSenderMetadata.h	/^	double 	session_retrans_time;$/;"	m	struct:MessageTransferStats
session_sent_bytes	protocol/VCMTPSender.h	/^	uint	session_sent_bytes;$/;"	m	struct:VcmtpSenderStats
session_sent_bytes	protocol/VcmtpSenderMetadata.h	/^	uint	session_sent_bytes;$/;"	m	struct:MessageTransferStats
session_sent_packets	protocol/VCMTPSender.h	/^	uint 	session_sent_packets;$/;"	m	struct:VcmtpSenderStats
session_sent_packets	protocol/VcmtpSenderMetadata.h	/^	uint 	session_sent_packets;$/;"	m	struct:MessageTransferStats
session_stats_vec	protocol/VCMTPReceiver.h	/^	vector<string>		session_stats_vec;$/;"	m	struct:VcmtpReceiverStats
session_total_time	protocol/VCMTPReceiver.h	/^	double	session_total_time;$/;"	m	struct:VcmtpReceiverStats
session_total_time	protocol/VCMTPSender.h	/^	double	session_total_time;$/;"	m	struct:VcmtpSenderStats
session_total_time	protocol/VcmtpSenderMetadata.h	/^	double	session_total_time;$/;"	m	struct:MessageTransferStats
session_trans_time	protocol/VCMTPReceiver.h	/^	double	session_trans_time;$/;"	m	struct:VcmtpReceiverStats
session_trans_time	protocol/VCMTPSender.h	/^	double	session_trans_time;$/;"	m	struct:VcmtpSenderStats
session_trans_time	protocol/VcmtpSenderMetadata.h	/^	double	session_trans_time;$/;"	m	struct:MessageTransferStats
setBofResponse	protocol/VcmtpFileEntry.h	/^    void setBofResponse(const BofResponse* bofResponse) {$/;"	f	class:VcmtpFileEntry
setBofResponseToIgnore	protocol/VcmtpFileEntry.h	/^    void setBofResponseToIgnore() {$/;"	f	class:VcmtpFileEntry
signal_action	CommUtil/RateShaper.h	/^	struct sigaction signal_action;$/;"	m	class:RateShaper	typeref:struct:RateShaper::sigaction
signal_event	CommUtil/RateShaper.h	/^	struct sigevent signal_event;$/;"	m	class:RateShaper	typeref:struct:RateShaper::sigevent
size	protocol/BofResponse.h	/^    size_t      size;$/;"	m	class:MemoryBofResponse
size	test/protocol/BofResponse/BofResponse.h	/^    size_t      size;$/;"	m	class:MemoryBofResponse
sock_fd	protocol/InetComm.h	/^	int sock_fd;$/;"	m	class:InetComm
sock_fd	protocol/TcpClient.h	/^	int sock_fd;$/;"	m	class:TcpClient
sock_fd	protocol/UdpComm.h	/^	int sock_fd;$/;"	m	class:UdpComm
sock_fd	protocol/VCMTPSender.cpp	/^	int	 sock_fd;$/;"	m	struct:TcpThreadInfo	file:
sock_fd	protocol/VCMTPSender.h	/^	int	sock_fd;$/;"	m	struct:StartRetransThreadInfo
sock_list_mutex	protocol/TcpServer.h	/^	pthread_mutex_t sock_list_mutex;$/;"	m	class:TcpServer
sock_list_mutex	protocol/VCMTPSender.h	/^	pthread_mutex_t sock_list_mutex;$/;"	m	class:VCMTPSender
sockfd	CommUtil/StatusProxy.h	/^	int sockfd;$/;"	m	class:StatusProxy
src_addr	protocol/RawSocketComm.h	/^	u_char 		src_addr[ETH_ALEN];$/;"	m	struct:MacFrame
src_port	protocol/vcmtp.h	/^	u_int16_t	src_port;$/;"	m	struct:VcmtpHeader
start_time_counter	CommUtil/Timer.cpp	/^CpuCycleCounter Timer::start_time_counter;$/;"	m	class:Timer	file:
start_time_counter	CommUtil/Timer.h	/^	static struct CpuCycleCounter start_time_counter;$/;"	m	class:Timer	typeref:struct:Timer::CpuCycleCounter
start_time_counter	protocol/VCMTPReceiver.h	/^	CpuCycleCounter 	start_time_counter;$/;"	m	struct:MessageReceiveStatus
stats	protocol/VcmtpSenderMetadata.h	/^    MessageTransferStats 	stats;$/;"	m	struct:MessageMetadata
status_proxy	protocol/VCMTPReceiver.h	/^	StatusProxy*		status_proxy;$/;"	m	class:VCMTPReceiver
status_proxy	protocol/VCMTPSender.h	/^	StatusProxy*		status_proxy;$/;"	m	class:VCMTPSender
stop	protocol/VCMTPReceiver.cpp	/^void VCMTPReceiver::stop() {$/;"	f	class:VCMTPReceiver
tcpAddr	protocol/VCMTPReceiver.h	/^	std::string     tcpAddr; \/* Address of TCP server for missed data *\/$/;"	m	class:VCMTPReceiver
tcpPort	protocol/VCMTPReceiver.h	/^	unsigned short  tcpPort; \/* Port number of TCP server for missed data *\/$/;"	m	class:VCMTPReceiver
tcp_port	protocol/VCMTPSender.h	/^	int		tcp_port;$/;"	m	struct:VcmtpSenderConfig
text	protocol/vcmtp.h	/^	char       	text[256];$/;"	m	struct:VcmtpSenderMessage
thread_exited	CommUtil/PerformanceCounter.h	/^	bool	thread_exited;$/;"	m	class:PerformanceCounter
thread_info_map	protocol/VCMTPSender.h	/^	map<int, StartRetransThreadInfo*> thread_info_map;$/;"	m	class:VCMTPSender
time_diff	protocol/VCMTPReceiver.h	/^	double 			time_diff;$/;"	m	class:VCMTPReceiver
time_diff_measured	protocol/VCMTPReceiver.h	/^	bool			time_diff_measured;$/;"	m	class:VCMTPReceiver
time_spec	CommUtil/RateShaper.h	/^	struct timespec time_spec;$/;"	m	class:RateShaper	typeref:struct:RateShaper::timespec
time_stamp	protocol/vcmtp.h	/^	clock_t		time_stamp;$/;"	m	struct:NackMsgInfo
time_stamp	protocol/vcmtp.h	/^	double		time_stamp;$/;"	m	struct:VcmtpSenderMessage
timer_id	CommUtil/RateShaper.h	/^	timer_t timer_id;$/;"	m	class:RateShaper
timer_specs	CommUtil/RateShaper.h	/^	struct itimerspec timer_specs;$/;"	m	class:RateShaper	typeref:struct:RateShaper::itimerspec
token_time_interval	CommUtil/RateShaper.h	/^	int token_time_interval;	\/\/ in microseconds$/;"	m	class:RateShaper
token_unit	CommUtil/RateShaper.h	/^	int token_unit;$/;"	m	class:RateShaper
tokens_in_bucket	CommUtil/RateShaper.h	/^	int tokens_in_bucket;$/;"	m	class:RateShaper
total_file_size	protocol/ExperimentManager2.h	/^	int total_file_size;$/;"	m	struct:File_Sample
total_missing_bytes	protocol/VCMTPReceiver.h	/^	size_t	        total_missing_bytes;$/;"	m	class:VCMTPReceiver
total_recv_bytes	protocol/VCMTPReceiver.h	/^	uint	total_recv_bytes;$/;"	m	struct:VcmtpReceiverStats
total_recv_packets	protocol/VCMTPReceiver.h	/^	uint 	total_recv_packets;$/;"	m	struct:VcmtpReceiverStats
total_retrans_bytes	protocol/VCMTPReceiver.h	/^	uint	total_retrans_bytes;$/;"	m	struct:VcmtpReceiverStats
total_retrans_bytes	protocol/VCMTPSender.h	/^	uint	total_retrans_bytes;$/;"	m	struct:VcmtpSenderStats
total_retrans_packets	protocol/VCMTPReceiver.h	/^	uint 	total_retrans_packets;$/;"	m	struct:VcmtpReceiverStats
total_retrans_packets	protocol/VCMTPSender.h	/^	uint 	total_retrans_packets;$/;"	m	struct:VcmtpSenderStats
total_sent_bytes	protocol/VCMTPSender.h	/^	uint	total_sent_bytes;$/;"	m	struct:VcmtpSenderStats
total_sent_packets	protocol/VCMTPSender.h	/^	uint 	total_sent_packets;$/;"	m	struct:VcmtpSenderStats
total_time	protocol/ExperimentManager2.h	/^	double total_time;$/;"	m	struct:File_Sample
transfer_request_queue	protocol/VcmtpEventQueueManager.h	/^	EventQueue* transfer_request_queue;$/;"	m	class:VcmtpEventQueueManager
transfer_type	protocol/VcmtpEventQueueManager.h	/^	u_int16_t 	transfer_type;$/;"	m	struct:VcmtpMsgTransferEvent
transfer_type	protocol/vcmtp.h	/^	u_int16_t 	transfer_type;$/;"	m	struct:VcmtpMessageInfo
txqueue_len	protocol/ExperimentManager.h	/^	int txqueue_len;$/;"	m	class:ExperimentManager
type	protocol/VCMTPSender.h	/^	TransferType	type;$/;"	m	struct:VcmtpMulticastTaskInfo
udp_buffer_values	CommUtil/PerformanceCounter.h	/^	vector<int>		udp_buffer_values;$/;"	m	class:PerformanceCounter
unfinished_recvers	protocol/VcmtpSenderMetadata.h	/^    set<int> 				unfinished_recvers;			\/\/ unfinished receiver set with socket ID as the key$/;"	m	struct:MessageMetadata
unit_size_token	protocol/RawSocketComm.h	/^	size_t unit_size_token;$/;"	m	class:RawSocketComm
vcmtp_group_addr	protocol/ReceiverStatusProxy.h	/^	string 		vcmtp_group_addr;$/;"	m	class:ReceiverStatusProxy
vcmtp_group_addr	protocol/SenderStatusProxy.h	/^	string 		vcmtp_group_addr;$/;"	m	class:SenderStatusProxy
vcmtp_group_id	protocol/VCMTPComm.h	/^	u_int32_t 	vcmtp_group_id;$/;"	m	class:VCMTPComm
vcmtp_header	protocol/vcmtp.h	/^	char*		vcmtp_header;$/;"	m	struct:PacketBuffer
vcmtp_port	protocol/vcmtp.h	/^const static ushort vcmtp_port = 123;$/;"	v
vcmtp_port_num	protocol/ReceiverStatusProxy.h	/^	int			vcmtp_port_num;$/;"	m	class:ReceiverStatusProxy
vcmtp_port_num	protocol/SenderStatusProxy.h	/^	int			vcmtp_port_num;$/;"	m	class:SenderStatusProxy
vcmtp_seq_num	protocol/VCMTPReceiver.h	/^	int		vcmtp_seq_num;$/;"	m	class:VCMTPReceiver
write_mutex	protocol/ExperimentManager2.h	/^	pthread_mutex_t write_mutex;$/;"	m	class:ExperimentManager2
write_pipe_fd	CommUtil/StatusProxy.h	/^	int		write_pipe_fd;$/;"	m	class:StatusProxy
write_pipe_fds	CommUtil/StatusProxy.h	/^	int		write_pipe_fds[2];$/;"	m	class:StatusProxy
~BofResponse	protocol/BofResponse.h	/^    virtual ~BofResponse() {};$/;"	f	class:BofResponse
~BofResponse	test/protocol/BofResponse/BofResponse.h	/^    virtual ~BofResponse() {};$/;"	f	class:BofResponse
~ConfigInfo	protocol/ConfigInfo.cpp	/^ConfigInfo::~ConfigInfo() {$/;"	f	class:ConfigInfo
~EventQueue	protocol/EventQueue.cpp	/^EventQueue::~EventQueue() {$/;"	f	class:EventQueue
~ExperimentManager	protocol/ExperimentManager.cpp	/^ExperimentManager::~ExperimentManager() {$/;"	f	class:ExperimentManager
~ExperimentManager2	protocol/ExperimentManager2.cpp	/^ExperimentManager2::~ExperimentManager2() {$/;"	f	class:ExperimentManager2
~FileMessageMetadata	protocol/VcmtpSenderMetadata.h	/^	~FileMessageMetadata() {$/;"	f	struct:FileMessageMetadata
~InetComm	protocol/InetComm.cpp	/^InetComm::~InetComm() {$/;"	f	class:InetComm
~LdmIntegrator	protocol/LdmIntegrator.cpp	/^LdmIntegrator::~LdmIntegrator() {$/;"	f	class:LdmIntegrator
~MemoryBofResponse	protocol/BofResponse.h	/^    virtual ~MemoryBofResponse() {};$/;"	f	class:MemoryBofResponse
~MemoryBofResponse	test/protocol/BofResponse/BofResponse.h	/^    virtual ~MemoryBofResponse() {};$/;"	f	class:MemoryBofResponse
~MessageMetadata	protocol/VcmtpSenderMetadata.h	/^    virtual ~MessageMetadata() {$/;"	f	struct:MessageMetadata
~MulticastComm	protocol/MulticastComm.cpp	/^MulticastComm::~MulticastComm() {$/;"	f	class:MulticastComm
~NetInterfaceManager	protocol/NetInterfaceManager.cpp	/^NetInterfaceManager::~NetInterfaceManager() {$/;"	f	class:NetInterfaceManager
~PerformanceCounter	CommUtil/PerformanceCounter.cpp	/^PerformanceCounter::~PerformanceCounter() {$/;"	f	class:PerformanceCounter
~RateShaper	CommUtil/RateShaper.cpp	/^RateShaper::~RateShaper() {$/;"	f	class:RateShaper
~ReceiverStatusProxy	protocol/ReceiverStatusProxy.cpp	/^ReceiverStatusProxy::~ReceiverStatusProxy() {$/;"	f	class:ReceiverStatusProxy
~ReceivingApplicationNotifier	protocol/ReceivingApplicationNotifier.h	/^    virtual ~ReceivingApplicationNotifier() {};$/;"	f	class:ReceivingApplicationNotifier
~SenderStatusProxy	protocol/SenderStatusProxy.cpp	/^SenderStatusProxy::~SenderStatusProxy() {$/;"	f	class:SenderStatusProxy
~StatusProxy	CommUtil/StatusProxy.cpp	/^StatusProxy::~StatusProxy() {$/;"	f	class:StatusProxy
~TcpClient	protocol/TcpClient.cpp	/^TcpClient::~TcpClient() {$/;"	f	class:TcpClient
~TcpServer	protocol/TcpServer.cpp	/^TcpServer::~TcpServer() {$/;"	f	class:TcpServer
~Tester	protocol/Tester.cpp	/^Tester::~Tester() {$/;"	f	class:Tester
~Timer	CommUtil/Timer.cpp	/^Timer::~Timer() {$/;"	f	class:Timer
~UdpComm	protocol/UdpComm.cpp	/^UdpComm::~UdpComm() {$/;"	f	class:UdpComm
~VCMTPComm	protocol/VCMTPComm.cpp	/^VCMTPComm::~VCMTPComm() {$/;"	f	class:VCMTPComm
~VCMTPReceiver	protocol/VCMTPReceiver.cpp	/^VCMTPReceiver::~VCMTPReceiver() {$/;"	f	class:VCMTPReceiver
~VCMTPSender	protocol/VCMTPSender.cpp	/^VCMTPSender::~VCMTPSender() {$/;"	f	class:VCMTPSender
~VcmtpEventQueueManager	protocol/VcmtpEventQueueManager.cpp	/^VcmtpEventQueueManager::~VcmtpEventQueueManager() {$/;"	f	class:VcmtpEventQueueManager
~VcmtpFileEntry	protocol/VcmtpFileEntry.h	/^    ~VcmtpFileEntry() {$/;"	f	class:VcmtpFileEntry
~VcmtpSenderMetadata	protocol/VcmtpSenderMetadata.cpp	/^VcmtpSenderMetadata::~VcmtpSenderMetadata() {$/;"	f	class:VcmtpSenderMetadata
