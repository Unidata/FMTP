CONTENTS OF THIS FILE
---------------------

* Introduction
* System Requirements
* Installation
* Usage
* Maintainers



INTRODUCTION
------------

VCMTPv3 is the third version of the reliable multicast transportation protocol
developed by University of Virginia. Currently, this protocol is running in
the user space as an application protocol. And underneath it's calling the
standard TCP/UDP and IP protocol stack. This protocol is consisted of two major
parts: the sending side and the receiving side. In a typical scenario, there
should be one sender and multiple receivers in a multicast group. The sender
runs the sending side protocol and sends out the data via multicast. Those
receivers will run the receiving side protocol to receive the data. If losses
happen, the receiver can request for retransmission via a TCP connection from
the receiver to the sender. And sender will determine either to respond to the
request or to reject it.
The whole program is written in C++.




SYSTEM REQUIREMENTS
-------------------

VCMTPv3 is developed and tested on Linux/UNIX. All the mainstream distributions
such as Ubuntu LTS 12.04 or above, CentOS 5 or above, Mac OSX 10.9 or above
and FreeBSD 9 or above will be supported. Microsoft Windows is not supported.

Recommended hardware for running this protocol would be:
* Duo core CPU or higher
* 1GB memory or higher
* 10GB hard drive or higher




INSTALLATION
------------

Before actually start to compile and install the protocol. Make sure the listed
pre-requisites have been met. All of the following instructions will be given
based on CentOS 6.6 x86_64.

* Git
  $ sudo yum install git

* G++ 4.4 or above
  $ sudo yum install gcc-c++

* For Mac OS X users, Apple has been moved to LLVM, thus no default gcc is
  provided any more, you could use clang++ as an alternative.

* Next, for sending side, go into the sending protocol folder
  $ cd VCMTPv3/sender
  $ make -f Makefile_send

* For receiving side, go into the receiving protocol folder
  $ cd VCMTPv3/receiver
  $ make -f Makefile_recv




USAGE
-----

VCMTPv3 is designed to cooperate with LDM (by UCAR) as an underlying transport
protocol. But it's also possible to work alone using the testing applications.
There is a testSendApp.cpp in the sender folder and a testRecvApp in the
receiver folder.
As being explained earlier, the testSendApp is the sending application which
plays the role of the single sender in a multicast group. And you can start as
many as testRecvApp you like to make them work as multicast receivers. But do
remember that the sender should always be started first before the receivers.

* Start the sender by
  $ ./startTestSendApp

* Start the receiver by
  $ ./startTestRecvApp

Since both the vcmtpSendv3 and vcmtpRecvv3 have multiple overloaded methods
and constructors, two scripts are used to start the testing application by
passing in command line arguments. As you can see, for the testSendApp, it
accepts the unicast IP:PORT, the multicast IP:PORT and a filename to be sent.
For the testRecvApp, it accepts the unicast IP:PORT and the multicast IP:PORT.
If there is a mocked product queue and TTL needs to be non-one value,
developers can modify the testSendApp.cpp to call another sendProduct().

To terminate the transmission, it is recommended to terminate the testRecvApp
first, or the other receivers could be affected if testSendApp is terminated
first instead.




MAINTAINERS
-----------

* Steve Emmerson, emmerson@ucar.edu,
  University Corporation for Atmospheric Research

* Shawn Chen, sc7cq@virginia.edu,
  University of Virginia
